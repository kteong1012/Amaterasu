
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model
{

public sealed class CharaConfig :  Luban.EditorBeanBase 
{
    public CharaConfig()
    {
            name = "";
            CharaTag = System.Array.Empty<GameEditor.ConfigEditor.Model.CharaTag>();
            showTag = System.Array.Empty<string>();
            skill = System.Array.Empty<int>();
            content = "";
            dicePools = new System.Collections.Generic.List<object[]>();
            equipLimit = new GameEditor.ConfigEditor.Model.CharaEquipCount();
            pic = "";
            heroPic = "";
            model = "";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
            else
            {
                id = 0;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  name = _fieldJson;
            }
            else
            {
                name = "";
            }
        }
        
        { 
            var _fieldJson = _json["CharaTag"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; CharaTag = new GameEditor.ConfigEditor.Model.CharaTag[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.CharaTag __v0;  if(__e0.IsString) { __v0 = (GameEditor.ConfigEditor.Model.CharaTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.CharaTag), __e0); } else if(__e0.IsNumber) { __v0 = (GameEditor.ConfigEditor.Model.CharaTag)(int)__e0; } else { throw new SerializationException(); }    CharaTag[__i0++] = __v0; }  
            }
            else
            {
                CharaTag = System.Array.Empty<GameEditor.ConfigEditor.Model.CharaTag>();
            }
        }
        
        { 
            var _fieldJson = _json["show_tag"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; showTag = new string[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { string __v0;  if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0;  showTag[__i0++] = __v0; }  
            }
            else
            {
                showTag = System.Array.Empty<string>();
            }
        }
        
        { 
            var _fieldJson = _json["skill"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; skill = new int[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  skill[__i0++] = __v0; }  
            }
            else
            {
                skill = System.Array.Empty<int>();
            }
        }
        
        { 
            var _fieldJson = _json["life"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  life = _fieldJson;
            }
            else
            {
                life = 0;
            }
        }
        
        { 
            var _fieldJson = _json["content"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  content = _fieldJson;
            }
            else
            {
                content = "";
            }
        }
        
        { 
            var _fieldJson = _json["dice_pools"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } dicePools = new System.Collections.Generic.List<object[]>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.DicePoolType __k0;  if(__e0[0].IsString) { __k0 = (GameEditor.ConfigEditor.Model.DicePoolType)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.DicePoolType), __e0[0]); } else if(__e0[0].IsNumber) { __k0 = (GameEditor.ConfigEditor.Model.DicePoolType)(int)__e0[0]; } else { throw new SerializationException(); }   System.Collections.Generic.List<int> __v0;  if(!__e0[1].IsArray) { throw new SerializationException(); } __v0 = new System.Collections.Generic.List<int>(); foreach(SimpleJSON.JSONNode __e1 in __e0[1].Children) { int __v1;  if(!__e1.IsNumber) { throw new SerializationException(); }  __v1 = __e1;  __v0.Add(__v1); }    dicePools.Add(new object[] { __k0, __v0 }); }  
            }
            else
            {
                dicePools = new System.Collections.Generic.List<object[]>();
            }
        }
        
        { 
            var _fieldJson = _json["ai"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  ai = _fieldJson;
            }
            else
            {
                ai = 0;
            }
        }
        
        { 
            var _fieldJson = _json["god_point"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  godPoint = _fieldJson;
            }
            else
            {
                godPoint = 0;
            }
        }
        
        { 
            var _fieldJson = _json["avg"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  avg = _fieldJson;
            }
            else
            {
                avg = 0;
            }
        }
        
        { 
            var _fieldJson = _json["is_hero"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  isHero = _fieldJson;
            }
            else
            {
                isHero = false;
            }
        }
        
        { 
            var _fieldJson = _json["equip_limit"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  equipLimit = GameEditor.ConfigEditor.Model.CharaEquipCount.LoadJsonCharaEquipCount(_fieldJson);
            }
            else
            {
                equipLimit = new CharaEquipCount();
            }
        }
        
        { 
            var _fieldJson = _json["editable"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  editable = _fieldJson;
            }
            else
            {
                editable = false;
            }
        }
        
        { 
            var _fieldJson = _json["unlock_counter"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  unlockCounter = _fieldJson;
            }
            else
            {
                unlockCounter = 0;
            }
        }
        
        { 
            var _fieldJson = _json["unlock_buff"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  unlockBuff = _fieldJson;
            }
            else
            {
                unlockBuff = 0;
            }
        }
        
        { 
            var _fieldJson = _json["pic"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  pic = _fieldJson;
            }
            else
            {
                pic = "";
            }
        }
        
        { 
            var _fieldJson = _json["hero_pic"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  heroPic = _fieldJson;
            }
            else
            {
                heroPic = "";
            }
        }
        
        { 
            var _fieldJson = _json["model"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  model = _fieldJson;
            }
            else
            {
                model = "";
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }

        if (name != null)
        {
            _json["name"] = new JSONString(name);
        }

        if (CharaTag != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in CharaTag) { __cjson0["null"] = new JSONNumber((int)__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["CharaTag"] = __cjson0; }
        }

        if (showTag != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in showTag) { __cjson0["null"] = new JSONString(__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["show_tag"] = __cjson0; }
        }

        if (skill != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in skill) { __cjson0["null"] = new JSONNumber(__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["skill"] = __cjson0; }
        }
        {
            _json["life"] = new JSONNumber(life);
        }

        if (content != null)
        {
            _json["content"] = new JSONString(content);
        }

        if (dicePools != null)
        {
            {
                var __cjson0 = new JSONArray();
                foreach(var __e0 in dicePools)
                {
                    var __entry0 = new JSONArray();
                    __cjson0[null] = __entry0;
                    __entry0["null"] = new JSONNumber((int)(GameEditor.ConfigEditor.Model.DicePoolType)__e0[0]);
                    { var __cjson1 = new JSONArray(); foreach(var __e1 in (System.Collections.Generic.List<int>)__e0[1]) { __cjson1["null"] = new JSONNumber(__e1); } __cjson1.Inline = __cjson1.Count == 0; __entry0["null"] = __cjson1; }
                }
                __cjson0.Inline = __cjson0.Count == 0;
                _json["dice_pools"] = __cjson0;
            }
        }
        {
            _json["ai"] = new JSONNumber(ai);
        }
        {
            _json["god_point"] = new JSONNumber(godPoint);
        }
        {
            _json["avg"] = new JSONNumber(avg);
        }
        {
            _json["is_hero"] = new JSONBool(isHero);
        }

        if (equipLimit != null)
        {
            { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.CharaEquipCount.SaveJsonCharaEquipCount(equipLimit, __bjson); _json["equip_limit"] = __bjson; }
        }
        {
            _json["editable"] = new JSONBool(editable);
        }
        {
            _json["unlock_counter"] = new JSONNumber(unlockCounter);
        }
        {
            _json["unlock_buff"] = new JSONNumber(unlockBuff);
        }

        if (pic != null)
        {
            _json["pic"] = new JSONString(pic);
        }

        if (heroPic != null)
        {
            _json["hero_pic"] = new JSONString(heroPic);
        }

        if (model != null)
        {
            _json["model"] = new JSONString(model);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderCharaConfig(CharaConfig obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
this.id = UnityEditor.EditorGUILayout.IntField(this.id, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("名称", "name"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("name", "名称"), GUILayout.Width(100));
}
this.name = UnityEditor.EditorGUILayout.TextField(this.name, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.name,__x =>this.name = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("标签", "CharaTag"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("CharaTag", "标签"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.CharaTag.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.CharaTag>(this.CharaTag);
            __list1.RemoveAt(__i1);
            this.CharaTag = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        GameEditor.ConfigEditor.Model.CharaTag __e1 = this.CharaTag[__i1];
        {
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)__e1;
        var __alias2 = (CharaTag_Alias)__e1;
        __alias2 = (CharaTag_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = CharaTag_Metadata.GetByNameOrAlias(__alias2.ToString());
        __e1 = (GameEditor.ConfigEditor.Model.CharaTag)__item2.Value;
    }
    else
    {
        __e1 = (GameEditor.ConfigEditor.Model.CharaTag)UnityEditor.EditorGUILayout.EnumPopup(__e1, GUILayout.Width(150));
    }
};
        this.CharaTag[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.CharaTag>(this.CharaTag);
        GameEditor.ConfigEditor.Model.CharaTag __e1;
        __e1 = GameEditor.ConfigEditor.Model.CharaTag.Human;;
        __list1.Add(__e1);
        this.CharaTag = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            GameEditor.ConfigEditor.Model.CharaTag __importElement1;
            if(__importJson1.IsString) { __importElement1 = (GameEditor.ConfigEditor.Model.CharaTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.CharaTag), __importJson1); } else if(__importJson1.IsNumber) { __importElement1 = (GameEditor.ConfigEditor.Model.CharaTag)(int)__importJson1; } else { throw new SerializationException(); }  
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.CharaTag>(this.CharaTag);
            __list1.Add(__importElement1);
            this.CharaTag = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("UI显示用标签", "show_tag"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("show_tag", "UI显示用标签"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.showTag.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<string>(this.showTag);
            __list1.RemoveAt(__i1);
            this.showTag = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        string __e1 = this.showTag[__i1];
        __e1 = UnityEditor.EditorGUILayout.TextField(__e1, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(__e1,__x =>__e1 = __x);
};
        this.showTag[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<string>(this.showTag);
        string __e1;
        __e1 = "";;
        __list1.Add(__e1);
        this.showTag = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            string __importElement1;
            if(!__importJson1.IsString) { throw new SerializationException(); }  __importElement1 = __importJson1;
            var __list1 = new System.Collections.Generic.List<string>(this.showTag);
            __list1.Add(__importElement1);
            this.showTag = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("天生技能", "skill"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("skill", "天生技能"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.skill.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<int>(this.skill);
            __list1.RemoveAt(__i1);
            this.skill = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        int __e1 = this.skill[__i1];
        __e1 = UnityEditor.EditorGUILayout.IntField(__e1, GUILayout.Width(150));;
        this.skill[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<int>(this.skill);
        int __e1;
        __e1 = 0;;
        __list1.Add(__e1);
        this.skill = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            int __importElement1;
            if(!__importJson1.IsNumber) { throw new SerializationException(); }  __importElement1 = __importJson1;
            var __list1 = new System.Collections.Generic.List<int>(this.skill);
            __list1.Add(__importElement1);
            this.skill = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("基础生命值", "life"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("life", "基础生命值"), GUILayout.Width(100));
}
this.life = UnityEditor.EditorGUILayout.IntField(this.life, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("角色介绍", "content"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("content", "角色介绍"), GUILayout.Width(100));
}
this.content = UnityEditor.EditorGUILayout.TextField(this.content, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.content,__x =>this.content = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("dice_pools", "dice_pools"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("dice_pools", ""), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.dicePools.Count;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            this.dicePools.RemoveAt(__i1);
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        var __e1 = this.dicePools[__i1];
        GameEditor.ConfigEditor.Model.DicePoolType __key1 = GameEditor.ConfigEditor.Model.DicePoolType.Extra;
        System.Collections.Generic.List<int> __value1 = new System.Collections.Generic.List<int>();
        if (__e1 == null)
        {
            __e1 = new object[2] { __key1, __value1 };
            this.dicePools[__i1] = __e1;
        }
        else
        {
            __key1 = __e1[0] != null ? (GameEditor.ConfigEditor.Model.DicePoolType)__e1[0] : __key1;
            __value1 = __e1[1] != null ? (System.Collections.Generic.List<int>)__e1[1] : __value1;
        }
        {
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)__key1;
        var __alias2 = (DicePoolType_Alias)__key1;
        __alias2 = (DicePoolType_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = DicePoolType_Metadata.GetByNameOrAlias(__alias2.ToString());
        __key1 = (GameEditor.ConfigEditor.Model.DicePoolType)__item2.Value;
    }
    else
    {
        __key1 = (GameEditor.ConfigEditor.Model.DicePoolType)UnityEditor.EditorGUILayout.EnumPopup(__key1, GUILayout.Width(150));
    }
};
        {
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n2 = __value1.Count;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n2.ToString());
    for (int __i2 = 0; __i2 < __n2; __i2++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            __value1.RemoveAt(__i2);
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i2.ToString(), GUILayout.Width(20));
        int __e2 = __value1[__i2];
        __e2 = UnityEditor.EditorGUILayout.IntField(__e2, GUILayout.Width(150));;
        __value1[__i2] = __e2;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        int __e2;
        __e2 = 0;;
        __value1.Add(__e2);
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText2) => 
        {
            var __importJson2 = SimpleJSON.JSON.Parse(__importJsonText2);
            int __importElement2;
            if(!__importJson2.IsNumber) { throw new SerializationException(); }  __importElement2 = __importJson2;
            __value1.Add(__importElement2);
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
};
        __e1[0] = __key1;
        __e1[1] = __value1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        this.dicePools.Add(new object[2]);
    }
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("ai的id", "ai"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("ai", "ai的id"), GUILayout.Width(100));
}
this.ai = UnityEditor.EditorGUILayout.IntField(this.ai, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("神赐点", "god_point"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("god_point", "神赐点"), GUILayout.Width(100));
}
this.godPoint = UnityEditor.EditorGUILayout.IntField(this.godPoint, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("avg节点", "avg"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("avg", "avg节点"), GUILayout.Width(100));
}
this.avg = UnityEditor.EditorGUILayout.IntField(this.avg, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("是否是主角", "is_hero"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("is_hero", "是否是主角"), GUILayout.Width(100));
}
this.isHero = UnityEditor.EditorGUILayout.Toggle(this.isHero, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("装备装配限制", "equip_limit"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("equip_limit", "装备装配限制"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("头部", "Head"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Head", "头部"), GUILayout.Width(100));
}
this.equipLimit.Head = UnityEditor.EditorGUILayout.IntField(this.equipLimit.Head, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("手部", "Hand"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Hand", "手部"), GUILayout.Width(100));
}
this.equipLimit.Hand = UnityEditor.EditorGUILayout.IntField(this.equipLimit.Hand, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("身体", "Body"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Body", "身体"), GUILayout.Width(100));
}
this.equipLimit.Body = UnityEditor.EditorGUILayout.IntField(this.equipLimit.Body, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("腿部", "Legs"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Legs", "腿部"), GUILayout.Width(100));
}
this.equipLimit.Legs = UnityEditor.EditorGUILayout.IntField(this.equipLimit.Legs, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("随从", "Followers"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Followers", "随从"), GUILayout.Width(100));
}
this.equipLimit.Followers = UnityEditor.EditorGUILayout.IntField(this.equipLimit.Followers, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("是否可编辑属性", "editable"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("editable", "是否可编辑属性"), GUILayout.Width(100));
}
this.editable = UnityEditor.EditorGUILayout.Toggle(this.editable, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("解锁计数器", "unlock_counter"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("unlock_counter", "解锁计数器"), GUILayout.Width(100));
}
this.unlockCounter = UnityEditor.EditorGUILayout.IntField(this.unlockCounter, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("解锁buff", "unlock_buff"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("unlock_buff", "解锁buff"), GUILayout.Width(100));
}
this.unlockBuff = UnityEditor.EditorGUILayout.IntField(this.unlockBuff, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("头像图", "pic"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("pic", "头像图"), GUILayout.Width(100));
}
this.pic = UnityEditor.EditorGUILayout.TextField(this.pic, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.pic,__x =>this.pic = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("选人界面背景图", "hero_pic"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("hero_pic", "选人界面背景图"), GUILayout.Width(100));
}
this.heroPic = UnityEditor.EditorGUILayout.TextField(this.heroPic, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.heroPic,__x =>this.heroPic = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("模型", "model"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("model", "模型"), GUILayout.Width(100));
}
this.model = UnityEditor.EditorGUILayout.TextField(this.model, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.model,__x =>this.model = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static CharaConfig LoadJsonCharaConfig(SimpleJSON.JSONNode _json)
    {
        CharaConfig obj = new CharaConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonCharaConfig(CharaConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public int id;
    /// <summary>
    /// 名称
    /// </summary>
    public string name;
    /// <summary>
    /// 标签
    /// </summary>
    public GameEditor.ConfigEditor.Model.CharaTag[] CharaTag;
    /// <summary>
    /// UI显示用标签
    /// </summary>
    public string[] showTag;
    /// <summary>
    /// 天生技能
    /// </summary>
    public int[] skill;
    /// <summary>
    /// 基础生命值
    /// </summary>
    public int life;
    /// <summary>
    /// 角色介绍
    /// </summary>
    public string content;
    public System.Collections.Generic.List<object[]> dicePools;
    /// <summary>
    /// ai的id
    /// </summary>
    public int ai;
    /// <summary>
    /// 神赐点
    /// </summary>
    public int godPoint;
    /// <summary>
    /// avg节点
    /// </summary>
    public int avg;
    /// <summary>
    /// 是否是主角
    /// </summary>
    public bool isHero;
    /// <summary>
    /// 装备装配限制
    /// </summary>
    public GameEditor.ConfigEditor.Model.CharaEquipCount equipLimit;
    /// <summary>
    /// 是否可编辑属性
    /// </summary>
    public bool editable;
    /// <summary>
    /// 解锁计数器
    /// </summary>
    public int unlockCounter;
    /// <summary>
    /// 解锁buff
    /// </summary>
    public int unlockBuff;
    /// <summary>
    /// 头像图
    /// </summary>
    public string pic;
    /// <summary>
    /// 选人界面背景图
    /// </summary>
    public string heroPic;
    /// <summary>
    /// 模型
    /// </summary>
    public string model;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "name:" + name + ","
        + "CharaTag:" + Luban.StringUtil.CollectionToString(CharaTag) + ","
        + "showTag:" + Luban.StringUtil.CollectionToString(showTag) + ","
        + "skill:" + Luban.StringUtil.CollectionToString(skill) + ","
        + "life:" + life + ","
        + "content:" + content + ","
        + "dicePools:" + Luban.StringUtil.CollectionToString(dicePools) + ","
        + "ai:" + ai + ","
        + "godPoint:" + godPoint + ","
        + "avg:" + avg + ","
        + "isHero:" + isHero + ","
        + "equipLimit:" + equipLimit + ","
        + "editable:" + editable + ","
        + "unlockCounter:" + unlockCounter + ","
        + "unlockBuff:" + unlockBuff + ","
        + "pic:" + pic + ","
        + "heroPic:" + heroPic + ","
        + "model:" + model + ","
        + "}";
    }
}

}

