
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Result
{

/// <summary>
/// 指定骰子与骰面附加命定。触发result后开启一个UI面板，显示符合要求的物品骰子（会依据骰子池展示，让玩家知道各个骰子的位置）。玩家选择其中一个骰子，再选择其中一个骰面。选中的骰子会依据骰面获得“命定”buff，在下一次投掷中一定会骰出某个面。这个功能只为“命定”而做，功能较繁琐，会比较死。
/// </summary>
public sealed class AddDecidedToDiceByTag :  Result.DataResult 
{
    public AddDecidedToDiceByTag()
    {
            diceTag = GameEditor.ConfigEditor.Model.DiceTag.Property;
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "AddDecidedToDiceByTag";

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["dice_tag"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { diceTag = (GameEditor.ConfigEditor.Model.DiceTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.DiceTag), _fieldJson); } else if(_fieldJson.IsNumber) { diceTag = (GameEditor.ConfigEditor.Model.DiceTag)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                diceTag = GameEditor.ConfigEditor.Model.DiceTag.Property;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["dice_tag"] = new JSONNumber((int)diceTag);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderAddDecidedToDiceByTag(AddDecidedToDiceByTag obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰子标签", "dice_tag"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("dice_tag", "骰子标签"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.diceTag;
        var __alias1 = (DiceTag_Alias)this.diceTag;
        __alias1 = (DiceTag_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = DiceTag_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.diceTag = (GameEditor.ConfigEditor.Model.DiceTag)__item1.Value;
    }
    else
    {
        this.diceTag = (GameEditor.ConfigEditor.Model.DiceTag)UnityEditor.EditorGUILayout.EnumPopup(this.diceTag, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static AddDecidedToDiceByTag LoadJsonAddDecidedToDiceByTag(SimpleJSON.JSONNode _json)
    {
        AddDecidedToDiceByTag obj = new Result.AddDecidedToDiceByTag();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonAddDecidedToDiceByTag(AddDecidedToDiceByTag _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// 骰子标签
    /// </summary>
    public GameEditor.ConfigEditor.Model.DiceTag diceTag;

    public override string ToString()
    {
        return "{ "
        + "diceTag:" + diceTag + ","
        + "}";
    }
}

}

