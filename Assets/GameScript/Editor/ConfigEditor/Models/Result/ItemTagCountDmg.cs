
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Result
{

public sealed class ItemTagCountDmg :  Result.DataResult 
{
    public ItemTagCountDmg()
    {
            targetType = GameEditor.ConfigEditor.Model.Result.TargetType.Caster;
            itemTag = GameEditor.ConfigEditor.Model.ItemTag.Sword;
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "ItemTagCountDmg";

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["dmg_mul"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  dmgMul = _fieldJson;
            }
            else
            {
                dmgMul = 0;
            }
        }
        
        { 
            var _fieldJson = _json["target_type"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { targetType = (GameEditor.ConfigEditor.Model.Result.TargetType)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.Result.TargetType), _fieldJson); } else if(_fieldJson.IsNumber) { targetType = (GameEditor.ConfigEditor.Model.Result.TargetType)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                targetType = GameEditor.ConfigEditor.Model.Result.TargetType.Caster;
            }
        }
        
        { 
            var _fieldJson = _json["item_tag"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { itemTag = (GameEditor.ConfigEditor.Model.ItemTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.ItemTag), _fieldJson); } else if(_fieldJson.IsNumber) { itemTag = (GameEditor.ConfigEditor.Model.ItemTag)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                itemTag = GameEditor.ConfigEditor.Model.ItemTag.Sword;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["dmg_mul"] = new JSONNumber(dmgMul);
        }
        {
            _json["target_type"] = new JSONNumber((int)targetType);
        }
        {
            _json["item_tag"] = new JSONNumber((int)itemTag);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderItemTagCountDmg(ItemTagCountDmg obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("伤害倍率", "dmg_mul"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("dmg_mul", "伤害倍率"), GUILayout.Width(100));
}
this.dmgMul = UnityEditor.EditorGUILayout.DoubleField(this.dmgMul, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("目标类型", "target_type"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("target_type", "目标类型"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.targetType;
        var __alias1 = (Result.TargetType_Alias)this.targetType;
        __alias1 = (Result.TargetType_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = Result.TargetType_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.targetType = (GameEditor.ConfigEditor.Model.Result.TargetType)__item1.Value;
    }
    else
    {
        this.targetType = (GameEditor.ConfigEditor.Model.Result.TargetType)UnityEditor.EditorGUILayout.EnumPopup(this.targetType, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("物品Tag", "item_tag"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("item_tag", "物品Tag"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.itemTag;
        var __alias1 = (ItemTag_Alias)this.itemTag;
        __alias1 = (ItemTag_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = ItemTag_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.itemTag = (GameEditor.ConfigEditor.Model.ItemTag)__item1.Value;
    }
    else
    {
        this.itemTag = (GameEditor.ConfigEditor.Model.ItemTag)UnityEditor.EditorGUILayout.EnumPopup(this.itemTag, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static ItemTagCountDmg LoadJsonItemTagCountDmg(SimpleJSON.JSONNode _json)
    {
        ItemTagCountDmg obj = new Result.ItemTagCountDmg();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonItemTagCountDmg(ItemTagCountDmg _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// 伤害倍率
    /// </summary>
    public double dmgMul;
    /// <summary>
    /// 目标类型
    /// </summary>
    public GameEditor.ConfigEditor.Model.Result.TargetType targetType;
    /// <summary>
    /// 物品Tag
    /// </summary>
    public GameEditor.ConfigEditor.Model.ItemTag itemTag;

    public override string ToString()
    {
        return "{ "
        + "dmgMul:" + dmgMul + ","
        + "targetType:" + targetType + ","
        + "itemTag:" + itemTag + ","
        + "}";
    }
}

}

