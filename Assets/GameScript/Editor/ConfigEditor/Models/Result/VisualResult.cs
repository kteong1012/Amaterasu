
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Result
{

public abstract class VisualResult :  Result.ResultParam 
{
    public VisualResult()
    {
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "VisualResult";

    private int _typeIndex = -1;
    private int TypeIndex => _typeIndex;
    private static string[] Types = new string[]
    {
        "DamageJumpTextTemp",
        "TargetDmg",
        "TargetHeal",
        "ShootDmg",
        "ScreenDmg",
        "AoeDmg",
        "TargetEffect",
        "ShootEffect",
        "ScreenEffect",
        "AoeEffect",
    };
    private static string[] TypeAlias = new string[]
    {
        "伤害跳字",
        "表现_目标伤害",
        "表现_目标治疗",
        "表现_发射伤害",
        "表现_全屏伤害",
        "表现_AOE伤害",
        "表现_目标特效",
        "表现_发射特效",
        "表现_全屏特效",
        "表现_AOE特效",
    };

    public new static VisualResult Create(string type)
    {
        switch (type)
        {
            case "Result.DamageJumpTextTemp":   
            case "DamageJumpTextTemp":
            {
                var obj = new Result.DamageJumpTextTemp();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Result.TargetDmg":   
            case "TargetDmg":
            {
                var obj = new Result.TargetDmg();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Result.TargetHeal":   
            case "TargetHeal":
            {
                var obj = new Result.TargetHeal();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Result.ShootDmg":   
            case "ShootDmg":
            {
                var obj = new Result.ShootDmg();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Result.ScreenDmg":   
            case "ScreenDmg":
            {
                var obj = new Result.ScreenDmg();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Result.AoeDmg":   
            case "AoeDmg":
            {
                var obj = new Result.AoeDmg();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Result.TargetEffect":   
            case "TargetEffect":
            {
                var obj = new Result.TargetEffect();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Result.ShootEffect":   
            case "ShootEffect":
            {
                var obj = new Result.ShootEffect();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Result.ScreenEffect":   
            case "ScreenEffect":
            {
                var obj = new Result.ScreenEffect();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Result.AoeEffect":   
            case "AoeEffect":
            {
                var obj = new Result.AoeEffect();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            default: return null;
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderVisualResult(ref VisualResult obj)
    {
        UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
        var array = ConfigEditorSettings.showComment ? TypeAlias : Types;
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
        var index = UnityEditor.EditorGUILayout.Popup(obj.TypeIndex, array, GUILayout.Width(200));
        if (obj.TypeIndex != index)
        {
            obj = Create(Types[index]);
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        obj?.Render();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public override void Render()
    {
    }
    public static VisualResult LoadJsonVisualResult(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        VisualResult obj;
        switch (type)
        {
            case "Result.DamageJumpTextTemp":   
            case "DamageJumpTextTemp":
            {
                obj = new Result.DamageJumpTextTemp(); 
                obj._typeIndex = Array.IndexOf(Types, "DamageJumpTextTemp");
                break;
            }
            case "Result.TargetDmg":   
            case "TargetDmg":
            {
                obj = new Result.TargetDmg(); 
                obj._typeIndex = Array.IndexOf(Types, "TargetDmg");
                break;
            }
            case "Result.TargetHeal":   
            case "TargetHeal":
            {
                obj = new Result.TargetHeal(); 
                obj._typeIndex = Array.IndexOf(Types, "TargetHeal");
                break;
            }
            case "Result.ShootDmg":   
            case "ShootDmg":
            {
                obj = new Result.ShootDmg(); 
                obj._typeIndex = Array.IndexOf(Types, "ShootDmg");
                break;
            }
            case "Result.ScreenDmg":   
            case "ScreenDmg":
            {
                obj = new Result.ScreenDmg(); 
                obj._typeIndex = Array.IndexOf(Types, "ScreenDmg");
                break;
            }
            case "Result.AoeDmg":   
            case "AoeDmg":
            {
                obj = new Result.AoeDmg(); 
                obj._typeIndex = Array.IndexOf(Types, "AoeDmg");
                break;
            }
            case "Result.TargetEffect":   
            case "TargetEffect":
            {
                obj = new Result.TargetEffect(); 
                obj._typeIndex = Array.IndexOf(Types, "TargetEffect");
                break;
            }
            case "Result.ShootEffect":   
            case "ShootEffect":
            {
                obj = new Result.ShootEffect(); 
                obj._typeIndex = Array.IndexOf(Types, "ShootEffect");
                break;
            }
            case "Result.ScreenEffect":   
            case "ScreenEffect":
            {
                obj = new Result.ScreenEffect(); 
                obj._typeIndex = Array.IndexOf(Types, "ScreenEffect");
                break;
            }
            case "Result.AoeEffect":   
            case "AoeEffect":
            {
                obj = new Result.AoeEffect(); 
                obj._typeIndex = Array.IndexOf(Types, "AoeEffect");
                break;
            }
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonVisualResult(VisualResult _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }


    public override string ToString()
    {
        return "{ "
        + "}";
    }
}

}

