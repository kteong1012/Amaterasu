
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Result
{

public sealed class ChangeCounter :  Result.DataResult 
{
    public ChangeCounter()
    {
            counter = GameEditor.ConfigEditor.Model.Counter.CounterName.Counter1;
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "ChangeCounter";

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["counter"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { counter = (GameEditor.ConfigEditor.Model.Counter.CounterName)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.Counter.CounterName), _fieldJson); } else if(_fieldJson.IsNumber) { counter = (GameEditor.ConfigEditor.Model.Counter.CounterName)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                counter = GameEditor.ConfigEditor.Model.Counter.CounterName.Counter1;
            }
        }
        
        { 
            var _fieldJson = _json["plus"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  plus = _fieldJson;
            }
            else
            {
                plus = 0;
            }
        }
        
        { 
            var _fieldJson = _json["multiply"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  multiply = _fieldJson;
            }
            else
            {
                multiply = 0;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["counter"] = new JSONNumber((int)counter);
        }
        {
            _json["plus"] = new JSONNumber(plus);
        }
        {
            _json["multiply"] = new JSONNumber(multiply);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderChangeCounter(ChangeCounter obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("计数器", "counter"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("counter", "计数器"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.counter;
        var __alias1 = (Counter.CounterName_Alias)this.counter;
        __alias1 = (Counter.CounterName_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = Counter.CounterName_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.counter = (GameEditor.ConfigEditor.Model.Counter.CounterName)__item1.Value;
    }
    else
    {
        this.counter = (GameEditor.ConfigEditor.Model.Counter.CounterName)UnityEditor.EditorGUILayout.EnumPopup(this.counter, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("加减", "plus"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("plus", "加减"), GUILayout.Width(100));
}
this.plus = UnityEditor.EditorGUILayout.IntField(this.plus, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("乘除", "multiply"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("multiply", "乘除"), GUILayout.Width(100));
}
this.multiply = UnityEditor.EditorGUILayout.DoubleField(this.multiply, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static ChangeCounter LoadJsonChangeCounter(SimpleJSON.JSONNode _json)
    {
        ChangeCounter obj = new Result.ChangeCounter();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonChangeCounter(ChangeCounter _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// 计数器
    /// </summary>
    public GameEditor.ConfigEditor.Model.Counter.CounterName counter;
    /// <summary>
    /// 加减
    /// </summary>
    public int plus;
    /// <summary>
    /// 乘除
    /// </summary>
    public double multiply;

    public override string ToString()
    {
        return "{ "
        + "counter:" + counter + ","
        + "plus:" + plus + ","
        + "multiply:" + multiply + ","
        + "}";
    }
}

}

