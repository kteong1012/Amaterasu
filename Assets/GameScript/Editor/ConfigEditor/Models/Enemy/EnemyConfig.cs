
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Enemy
{

public sealed class EnemyConfig :  Luban.EditorBeanBase 
{
    public EnemyConfig()
    {
            uiPosition = new GameEditor.ConfigEditor.Model.Enemy.Vec2();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
            else
            {
                id = 0;
            }
        }
        
        { 
            var _fieldJson = _json["chara"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  chara = _fieldJson;
            }
            else
            {
                chara = 0;
            }
        }
        
        { 
            var _fieldJson = _json["feature"];
            if (_fieldJson != null)
            {
                
                if (!_fieldJson.IsObject)
                {
                    throw new SerializationException();
                }
                feature = GameEditor.ConfigEditor.Model.Enemy.Feature.EnemyFeature.LoadJsonEnemyFeature(_fieldJson);
            }
            else
            {
                feature = Enemy.Feature.EnemyFeature.Create("BossFeature");
            }
        }
        
        { 
            var _fieldJson = _json["position"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  position = _fieldJson;
            }
            else
            {
                position = 0;
            }
        }
        
        { 
            var _fieldJson = _json["ui_position"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  uiPosition = GameEditor.ConfigEditor.Model.Enemy.Vec2.LoadJsonVec2(_fieldJson);
            }
            else
            {
                uiPosition = new Enemy.Vec2();
            }
        }
        
        { 
            var _fieldJson = _json["show_award"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  showAward = _fieldJson;
            }
            else
            {
                showAward = false;
            }
        }
        
        { 
            var _fieldJson = _json["gold"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  gold = _fieldJson;
            }
            else
            {
                gold = 0;
            }
        }
        
        { 
            var _fieldJson = _json["exp"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  exp = _fieldJson;
            }
            else
            {
                exp = 0;
            }
        }
        
        { 
            var _fieldJson = _json["random_item_drop"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  randomItemDrop = _fieldJson;
            }
            else
            {
                randomItemDrop = 0;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }
        {
            _json["chara"] = new JSONNumber(chara);
        }

        if (feature != null)
        {
            { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.Enemy.Feature.EnemyFeature.SaveJsonEnemyFeature(feature, __bjson); _json["feature"] = __bjson; }
        }
        {
            _json["position"] = new JSONNumber(position);
        }

        if (uiPosition != null)
        {
            { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.Enemy.Vec2.SaveJsonVec2(uiPosition, __bjson); _json["ui_position"] = __bjson; }
        }
        {
            _json["show_award"] = new JSONBool(showAward);
        }
        {
            _json["gold"] = new JSONNumber(gold);
        }
        {
            _json["exp"] = new JSONNumber(exp);
        }
        {
            _json["random_item_drop"] = new JSONNumber(randomItemDrop);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderEnemyConfig(EnemyConfig obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
this.id = UnityEditor.EditorGUILayout.IntField(this.id, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("怪物主体id", "chara"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("chara", "怪物主体id"), GUILayout.Width(100));
}
this.chara = UnityEditor.EditorGUILayout.IntField(this.chara, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("特性", "feature"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("feature", "特性"), GUILayout.Width(100));
}
{
    if (this.feature == null)
{   
    this.feature = Enemy.Feature.EnemyFeature.Create("BossFeature");
}
    Enemy.Feature.EnemyFeature.RenderEnemyFeature(ref this.feature);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("位置", "position"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("position", "位置"), GUILayout.Width(100));
}
this.position = UnityEditor.EditorGUILayout.IntField(this.position, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("头像位置", "ui_position"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("ui_position", "头像位置"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("X", "X"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("X", ""), GUILayout.Width(100));
}
this.uiPosition.X = UnityEditor.EditorGUILayout.DoubleField(this.uiPosition.X, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Y", "Y"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Y", ""), GUILayout.Width(100));
}
this.uiPosition.Y = UnityEditor.EditorGUILayout.DoubleField(this.uiPosition.Y, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("是否死后显示掉落", "show_award"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("show_award", "是否死后显示掉落"), GUILayout.Width(100));
}
this.showAward = UnityEditor.EditorGUILayout.Toggle(this.showAward, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("掉落的金钱数", "gold"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("gold", "掉落的金钱数"), GUILayout.Width(100));
}
this.gold = UnityEditor.EditorGUILayout.IntField(this.gold, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("掉落的经验值", "exp"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("exp", "掉落的经验值"), GUILayout.Width(100));
}
this.exp = UnityEditor.EditorGUILayout.IntField(this.exp, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("随机掉落的物品", "random_item_drop"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("random_item_drop", "随机掉落的物品"), GUILayout.Width(100));
}
this.randomItemDrop = UnityEditor.EditorGUILayout.IntField(this.randomItemDrop, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static EnemyConfig LoadJsonEnemyConfig(SimpleJSON.JSONNode _json)
    {
        EnemyConfig obj = new Enemy.EnemyConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonEnemyConfig(EnemyConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public int id;
    /// <summary>
    /// 怪物主体id
    /// </summary>
    public int chara;
    /// <summary>
    /// 特性
    /// </summary>
    public GameEditor.ConfigEditor.Model.Enemy.Feature.EnemyFeature feature;
    /// <summary>
    /// 位置
    /// </summary>
    public int position;
    /// <summary>
    /// 头像位置
    /// </summary>
    public GameEditor.ConfigEditor.Model.Enemy.Vec2 uiPosition;
    /// <summary>
    /// 是否死后显示掉落
    /// </summary>
    public bool showAward;
    /// <summary>
    /// 掉落的金钱数
    /// </summary>
    public int gold;
    /// <summary>
    /// 掉落的经验值
    /// </summary>
    public int exp;
    /// <summary>
    /// 随机掉落的物品
    /// </summary>
    public int randomItemDrop;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "chara:" + chara + ","
        + "feature:" + feature + ","
        + "position:" + position + ","
        + "uiPosition:" + uiPosition + ","
        + "showAward:" + showAward + ","
        + "gold:" + gold + ","
        + "exp:" + exp + ","
        + "randomItemDrop:" + randomItemDrop + ","
        + "}";
    }
}

}

