
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Enemy.Feature
{

public abstract class EnemyFeature :  Luban.EditorBeanBase 
{
    public EnemyFeature()
    {
    }
    public abstract string GetTypeStr();

    private int _typeIndex = -1;
    private int TypeIndex => _typeIndex;
    private static string[] Types = new string[]
    {
        "BossFeature",
        "NormalFeature",
        "BuildingFeature",
    };
    private static string[] TypeAlias = new string[]
    {
        "Boss",
        "Normal",
        "Building",
    };

    public static EnemyFeature Create(string type)
    {
        switch (type)
        {
            case "Enemy.Feature.BossFeature":   
            case "BossFeature":
            {
                var obj = new Enemy.Feature.BossFeature();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Enemy.Feature.NormalFeature":   
            case "NormalFeature":
            {
                var obj = new Enemy.Feature.NormalFeature();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            case "Enemy.Feature.BuildingFeature":   
            case "BuildingFeature":
            {
                var obj = new Enemy.Feature.BuildingFeature();
                obj._typeIndex = Array.IndexOf(Types,type);
                return obj;
            }
            default: return null;
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderEnemyFeature(ref EnemyFeature obj)
    {
        UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
        var array = ConfigEditorSettings.showComment ? TypeAlias : Types;
        UnityEditor.EditorGUILayout.BeginHorizontal();
        UnityEditor.EditorGUILayout.LabelField("类型", GUILayout.Width(100));
        var index = UnityEditor.EditorGUILayout.Popup(obj.TypeIndex, array, GUILayout.Width(200));
        if (obj.TypeIndex != index)
        {
            obj = Create(Types[index]);
        }
        UnityEditor.EditorGUILayout.EndHorizontal();
        obj?.Render();
        UnityEditor.EditorGUILayout.EndVertical();
    }

    public override void Render()
    {
    }
    public static EnemyFeature LoadJsonEnemyFeature(SimpleJSON.JSONNode _json)
    {
        string type = _json["$type"];
        EnemyFeature obj;
        switch (type)
        {
            case "Enemy.Feature.BossFeature":   
            case "BossFeature":
            {
                obj = new Enemy.Feature.BossFeature(); 
                obj._typeIndex = Array.IndexOf(Types, "BossFeature");
                break;
            }
            case "Enemy.Feature.NormalFeature":   
            case "NormalFeature":
            {
                obj = new Enemy.Feature.NormalFeature(); 
                obj._typeIndex = Array.IndexOf(Types, "NormalFeature");
                break;
            }
            case "Enemy.Feature.BuildingFeature":   
            case "BuildingFeature":
            {
                obj = new Enemy.Feature.BuildingFeature(); 
                obj._typeIndex = Array.IndexOf(Types, "BuildingFeature");
                break;
            }
            default: throw new SerializationException();
        }
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonEnemyFeature(EnemyFeature _obj, SimpleJSON.JSONNode _json)
    {
        _json["$type"] = _obj.GetTypeStr();
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }


    public override string ToString()
    {
        return "{ "
        + "}";
    }
}

}

