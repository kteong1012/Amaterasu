
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model
{

public sealed class DiceConfig :  Luban.EditorBeanBase 
{
    public DiceConfig()
    {
            name = "";
            buffs = System.Array.Empty<int>();
            DiceTag = System.Array.Empty<GameEditor.ConfigEditor.Model.DiceTag>();
            showTag = System.Array.Empty<string>();
            icon = "";
            model = "";
            faces = System.Array.Empty<GameEditor.ConfigEditor.Model.Dice.DiceFaceValue>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
            else
            {
                id = 0;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  name = _fieldJson;
            }
            else
            {
                name = "";
            }
        }
        
        { 
            var _fieldJson = _json["face_count"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  faceCount = _fieldJson;
            }
            else
            {
                faceCount = 0;
            }
        }
        
        { 
            var _fieldJson = _json["buffs"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; buffs = new int[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  buffs[__i0++] = __v0; }  
            }
            else
            {
                buffs = System.Array.Empty<int>();
            }
        }
        
        { 
            var _fieldJson = _json["DiceTag"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; DiceTag = new GameEditor.ConfigEditor.Model.DiceTag[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.DiceTag __v0;  if(__e0.IsString) { __v0 = (GameEditor.ConfigEditor.Model.DiceTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.DiceTag), __e0); } else if(__e0.IsNumber) { __v0 = (GameEditor.ConfigEditor.Model.DiceTag)(int)__e0; } else { throw new SerializationException(); }    DiceTag[__i0++] = __v0; }  
            }
            else
            {
                DiceTag = System.Array.Empty<GameEditor.ConfigEditor.Model.DiceTag>();
            }
        }
        
        { 
            var _fieldJson = _json["show_tag"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; showTag = new string[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { string __v0;  if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0;  showTag[__i0++] = __v0; }  
            }
            else
            {
                showTag = System.Array.Empty<string>();
            }
        }
        
        { 
            var _fieldJson = _json["icon"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  icon = _fieldJson;
            }
            else
            {
                icon = "";
            }
        }
        
        { 
            var _fieldJson = _json["model"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  model = _fieldJson;
            }
            else
            {
                model = "";
            }
        }
        
        { 
            var _fieldJson = _json["faces"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; faces = new GameEditor.ConfigEditor.Model.Dice.DiceFaceValue[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.Dice.DiceFaceValue __v0;  if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = GameEditor.ConfigEditor.Model.Dice.DiceFaceValue.LoadJsonDiceFaceValue(__e0);  faces[__i0++] = __v0; }  
            }
            else
            {
                faces = System.Array.Empty<GameEditor.ConfigEditor.Model.Dice.DiceFaceValue>();
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }

        if (name != null)
        {
            _json["name"] = new JSONString(name);
        }
        {
            _json["face_count"] = new JSONNumber(faceCount);
        }

        if (buffs != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in buffs) { __cjson0["null"] = new JSONNumber(__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["buffs"] = __cjson0; }
        }

        if (DiceTag != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in DiceTag) { __cjson0["null"] = new JSONNumber((int)__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["DiceTag"] = __cjson0; }
        }

        if (showTag != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in showTag) { __cjson0["null"] = new JSONString(__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["show_tag"] = __cjson0; }
        }

        if (icon != null)
        {
            _json["icon"] = new JSONString(icon);
        }

        if (model != null)
        {
            _json["model"] = new JSONString(model);
        }

        if (faces != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in faces) { { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.Dice.DiceFaceValue.SaveJsonDiceFaceValue(__e0, __bjson); __cjson0["null"] = __bjson; } } __cjson0.Inline = __cjson0.Count == 0; _json["faces"] = __cjson0; }
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderDiceConfig(DiceConfig obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
this.id = UnityEditor.EditorGUILayout.IntField(this.id, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("名称", "name"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("name", "名称"), GUILayout.Width(100));
}
this.name = UnityEditor.EditorGUILayout.TextField(this.name, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.name,__x =>this.name = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("面数", "face_count"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("face_count", "面数"), GUILayout.Width(100));
}
this.faceCount = UnityEditor.EditorGUILayout.IntField(this.faceCount, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("buff的id", "buffs"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("buffs", "buff的id"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.buffs.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<int>(this.buffs);
            __list1.RemoveAt(__i1);
            this.buffs = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        int __e1 = this.buffs[__i1];
        __e1 = UnityEditor.EditorGUILayout.IntField(__e1, GUILayout.Width(150));;
        this.buffs[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<int>(this.buffs);
        int __e1;
        __e1 = 0;;
        __list1.Add(__e1);
        this.buffs = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            int __importElement1;
            if(!__importJson1.IsNumber) { throw new SerializationException(); }  __importElement1 = __importJson1;
            var __list1 = new System.Collections.Generic.List<int>(this.buffs);
            __list1.Add(__importElement1);
            this.buffs = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("tag", "DiceTag"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("DiceTag", "tag"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.DiceTag.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.DiceTag>(this.DiceTag);
            __list1.RemoveAt(__i1);
            this.DiceTag = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        GameEditor.ConfigEditor.Model.DiceTag __e1 = this.DiceTag[__i1];
        {
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)__e1;
        var __alias2 = (DiceTag_Alias)__e1;
        __alias2 = (DiceTag_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = DiceTag_Metadata.GetByNameOrAlias(__alias2.ToString());
        __e1 = (GameEditor.ConfigEditor.Model.DiceTag)__item2.Value;
    }
    else
    {
        __e1 = (GameEditor.ConfigEditor.Model.DiceTag)UnityEditor.EditorGUILayout.EnumPopup(__e1, GUILayout.Width(150));
    }
};
        this.DiceTag[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.DiceTag>(this.DiceTag);
        GameEditor.ConfigEditor.Model.DiceTag __e1;
        __e1 = GameEditor.ConfigEditor.Model.DiceTag.Property;;
        __list1.Add(__e1);
        this.DiceTag = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            GameEditor.ConfigEditor.Model.DiceTag __importElement1;
            if(__importJson1.IsString) { __importElement1 = (GameEditor.ConfigEditor.Model.DiceTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.DiceTag), __importJson1); } else if(__importJson1.IsNumber) { __importElement1 = (GameEditor.ConfigEditor.Model.DiceTag)(int)__importJson1; } else { throw new SerializationException(); }  
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.DiceTag>(this.DiceTag);
            __list1.Add(__importElement1);
            this.DiceTag = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("用于显示的Tag", "show_tag"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("show_tag", "用于显示的Tag"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.showTag.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<string>(this.showTag);
            __list1.RemoveAt(__i1);
            this.showTag = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        string __e1 = this.showTag[__i1];
        __e1 = UnityEditor.EditorGUILayout.TextField(__e1, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(__e1,__x =>__e1 = __x);
};
        this.showTag[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<string>(this.showTag);
        string __e1;
        __e1 = "";;
        __list1.Add(__e1);
        this.showTag = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            string __importElement1;
            if(!__importJson1.IsString) { throw new SerializationException(); }  __importElement1 = __importJson1;
            var __list1 = new System.Collections.Generic.List<string>(this.showTag);
            __list1.Add(__importElement1);
            this.showTag = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰子图标", "icon"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("icon", "骰子图标"), GUILayout.Width(100));
}
this.icon = UnityEditor.EditorGUILayout.TextField(this.icon, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.icon,__x =>this.icon = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰子模型路径", "model"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("model", "骰子模型路径"), GUILayout.Width(100));
}
this.model = UnityEditor.EditorGUILayout.TextField(this.model, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.model,__x =>this.model = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰面id", "faces"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("faces", "骰面id"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.faces.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Dice.DiceFaceValue>(this.faces);
            __list1.RemoveAt(__i1);
            this.faces = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        GameEditor.ConfigEditor.Model.Dice.DiceFaceValue __e1 = this.faces[__i1];
        {
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰面值", "value"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("value", "骰面值"), GUILayout.Width(100));
}
__e1.value = UnityEditor.EditorGUILayout.IntField(__e1.value, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰面技能", "skill"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("skill", "骰面技能"), GUILayout.Width(100));
}
__e1.skill = UnityEditor.EditorGUILayout.IntField(__e1.skill, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰面物品", "item"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("item", "骰面物品"), GUILayout.Width(100));
}
__e1.item = UnityEditor.EditorGUILayout.IntField(__e1.item, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰面贴图地址", "icon"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("icon", "骰面贴图地址"), GUILayout.Width(100));
}
__e1.icon = UnityEditor.EditorGUILayout.TextField(__e1.icon, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(__e1.icon,__x =>__e1.icon = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
};
        this.faces[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Dice.DiceFaceValue>(this.faces);
        GameEditor.ConfigEditor.Model.Dice.DiceFaceValue __e1;
        __e1 = new Dice.DiceFaceValue();;
        __list1.Add(__e1);
        this.faces = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            GameEditor.ConfigEditor.Model.Dice.DiceFaceValue __importElement1;
            if(!__importJson1.IsObject) { throw new SerializationException(); }  __importElement1 = GameEditor.ConfigEditor.Model.Dice.DiceFaceValue.LoadJsonDiceFaceValue(__importJson1);
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Dice.DiceFaceValue>(this.faces);
            __list1.Add(__importElement1);
            this.faces = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static DiceConfig LoadJsonDiceConfig(SimpleJSON.JSONNode _json)
    {
        DiceConfig obj = new DiceConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonDiceConfig(DiceConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public int id;
    /// <summary>
    /// 名称
    /// </summary>
    public string name;
    /// <summary>
    /// 面数
    /// </summary>
    public int faceCount;
    /// <summary>
    /// buff的id
    /// </summary>
    public int[] buffs;
    /// <summary>
    /// tag
    /// </summary>
    public GameEditor.ConfigEditor.Model.DiceTag[] DiceTag;
    /// <summary>
    /// 用于显示的Tag
    /// </summary>
    public string[] showTag;
    /// <summary>
    /// 骰子图标
    /// </summary>
    public string icon;
    /// <summary>
    /// 骰子模型路径
    /// </summary>
    public string model;
    /// <summary>
    /// 骰面id
    /// </summary>
    public GameEditor.ConfigEditor.Model.Dice.DiceFaceValue[] faces;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "name:" + name + ","
        + "faceCount:" + faceCount + ","
        + "buffs:" + Luban.StringUtil.CollectionToString(buffs) + ","
        + "DiceTag:" + Luban.StringUtil.CollectionToString(DiceTag) + ","
        + "showTag:" + Luban.StringUtil.CollectionToString(showTag) + ","
        + "icon:" + icon + ","
        + "model:" + model + ","
        + "faces:" + Luban.StringUtil.CollectionToString(faces) + ","
        + "}";
    }
}

}

