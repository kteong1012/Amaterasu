
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model
{

public sealed class ItemConfig :  Luban.EditorBeanBase 
{
    public ItemConfig()
    {
            name = "";
            content = "";
            icon = "";
            itemTag = System.Array.Empty<GameEditor.ConfigEditor.Model.ItemTag>();
            itemShowTag = System.Array.Empty<GameEditor.ConfigEditor.Model.ItemTag>();
            skills = new System.Collections.Generic.List<int>();
            installResults = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Result.ResultParam>();
            uninstallResults = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Result.ResultParam>();
            itemType = GameEditor.ConfigEditor.Model.ItemType.NoType;
            rarity = GameEditor.ConfigEditor.Model.ItemRarity.Common;
            itemFitRule = new GameEditor.ConfigEditor.Model.ItemFitRule();
            equipCount = new GameEditor.ConfigEditor.Model.ItemEquipCount();
            diceWindowId = System.Array.Empty<int>();
            buffWindowId = System.Array.Empty<int>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
            else
            {
                id = 0;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  name = _fieldJson;
            }
            else
            {
                name = "";
            }
        }
        
        { 
            var _fieldJson = _json["content"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  content = _fieldJson;
            }
            else
            {
                content = "";
            }
        }
        
        { 
            var _fieldJson = _json["icon"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  icon = _fieldJson;
            }
            else
            {
                icon = "";
            }
        }
        
        { 
            var _fieldJson = _json["item_tag"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; itemTag = new GameEditor.ConfigEditor.Model.ItemTag[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.ItemTag __v0;  if(__e0.IsString) { __v0 = (GameEditor.ConfigEditor.Model.ItemTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.ItemTag), __e0); } else if(__e0.IsNumber) { __v0 = (GameEditor.ConfigEditor.Model.ItemTag)(int)__e0; } else { throw new SerializationException(); }    itemTag[__i0++] = __v0; }  
            }
            else
            {
                itemTag = System.Array.Empty<GameEditor.ConfigEditor.Model.ItemTag>();
            }
        }
        
        { 
            var _fieldJson = _json["item_show_tag"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; itemShowTag = new GameEditor.ConfigEditor.Model.ItemTag[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.ItemTag __v0;  if(__e0.IsString) { __v0 = (GameEditor.ConfigEditor.Model.ItemTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.ItemTag), __e0); } else if(__e0.IsNumber) { __v0 = (GameEditor.ConfigEditor.Model.ItemTag)(int)__e0; } else { throw new SerializationException(); }    itemShowTag[__i0++] = __v0; }  
            }
            else
            {
                itemShowTag = System.Array.Empty<GameEditor.ConfigEditor.Model.ItemTag>();
            }
        }
        
        { 
            var _fieldJson = _json["skills"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } skills = new System.Collections.Generic.List<int>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  skills.Add(__v0); }  
            }
            else
            {
                skills = new System.Collections.Generic.List<int>();
            }
        }
        
        { 
            var _fieldJson = _json["install_results"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } installResults = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Result.ResultParam>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.Result.ResultParam __v0;  
                if (!__e0.IsObject)
                {
                    throw new SerializationException();
                }
                __v0 = GameEditor.ConfigEditor.Model.Result.ResultParam.LoadJsonResultParam(__e0);  installResults.Add(__v0); }  
            }
            else
            {
                installResults = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Result.ResultParam>();
            }
        }
        
        { 
            var _fieldJson = _json["uninstall_results"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } uninstallResults = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Result.ResultParam>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.Result.ResultParam __v0;  
                if (!__e0.IsObject)
                {
                    throw new SerializationException();
                }
                __v0 = GameEditor.ConfigEditor.Model.Result.ResultParam.LoadJsonResultParam(__e0);  uninstallResults.Add(__v0); }  
            }
            else
            {
                uninstallResults = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Result.ResultParam>();
            }
        }
        
        { 
            var _fieldJson = _json["is_multiple_drop"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  isMultipleDrop = _fieldJson;
            }
            else
            {
                isMultipleDrop = false;
            }
        }
        
        { 
            var _fieldJson = _json["is_locked"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  isLocked = _fieldJson;
            }
            else
            {
                isLocked = false;
            }
        }
        
        { 
            var _fieldJson = _json["item_type"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { itemType = (GameEditor.ConfigEditor.Model.ItemType)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.ItemType), _fieldJson); } else if(_fieldJson.IsNumber) { itemType = (GameEditor.ConfigEditor.Model.ItemType)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                itemType = GameEditor.ConfigEditor.Model.ItemType.NoType;
            }
        }
        
        { 
            var _fieldJson = _json["rarity"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { rarity = (GameEditor.ConfigEditor.Model.ItemRarity)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.ItemRarity), _fieldJson); } else if(_fieldJson.IsNumber) { rarity = (GameEditor.ConfigEditor.Model.ItemRarity)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                rarity = GameEditor.ConfigEditor.Model.ItemRarity.Common;
            }
        }
        
        { 
            var _fieldJson = _json["item_fit_rule"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  itemFitRule = GameEditor.ConfigEditor.Model.ItemFitRule.LoadJsonItemFitRule(_fieldJson);
            }
            else
            {
                itemFitRule = new ItemFitRule();
            }
        }
        
        { 
            var _fieldJson = _json["equip_count"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  equipCount = GameEditor.ConfigEditor.Model.ItemEquipCount.LoadJsonItemEquipCount(_fieldJson);
            }
            else
            {
                equipCount = new ItemEquipCount();
            }
        }
        
        { 
            var _fieldJson = _json["prize"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  prize = _fieldJson;
            }
            else
            {
                prize = 0;
            }
        }
        
        { 
            var _fieldJson = _json["dice_window_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; diceWindowId = new int[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  diceWindowId[__i0++] = __v0; }  
            }
            else
            {
                diceWindowId = System.Array.Empty<int>();
            }
        }
        
        { 
            var _fieldJson = _json["buff_window_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; buffWindowId = new int[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  buffWindowId[__i0++] = __v0; }  
            }
            else
            {
                buffWindowId = System.Array.Empty<int>();
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }

        if (name != null)
        {
            _json["name"] = new JSONString(name);
        }

        if (content != null)
        {
            _json["content"] = new JSONString(content);
        }

        if (icon != null)
        {
            _json["icon"] = new JSONString(icon);
        }

        if (itemTag != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in itemTag) { __cjson0["null"] = new JSONNumber((int)__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["item_tag"] = __cjson0; }
        }

        if (itemShowTag != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in itemShowTag) { __cjson0["null"] = new JSONNumber((int)__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["item_show_tag"] = __cjson0; }
        }

        if (skills != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in skills) { __cjson0["null"] = new JSONNumber(__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["skills"] = __cjson0; }
        }

        if (installResults != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in installResults) { { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.Result.ResultParam.SaveJsonResultParam(__e0, __bjson); __cjson0["null"] = __bjson; } } __cjson0.Inline = __cjson0.Count == 0; _json["install_results"] = __cjson0; }
        }

        if (uninstallResults != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in uninstallResults) { { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.Result.ResultParam.SaveJsonResultParam(__e0, __bjson); __cjson0["null"] = __bjson; } } __cjson0.Inline = __cjson0.Count == 0; _json["uninstall_results"] = __cjson0; }
        }
        {
            _json["is_multiple_drop"] = new JSONBool(isMultipleDrop);
        }
        {
            _json["is_locked"] = new JSONBool(isLocked);
        }
        {
            _json["item_type"] = new JSONNumber((int)itemType);
        }
        {
            _json["rarity"] = new JSONNumber((int)rarity);
        }

        if (itemFitRule != null)
        {
            { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.ItemFitRule.SaveJsonItemFitRule(itemFitRule, __bjson); _json["item_fit_rule"] = __bjson; }
        }

        if (equipCount != null)
        {
            { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.ItemEquipCount.SaveJsonItemEquipCount(equipCount, __bjson); _json["equip_count"] = __bjson; }
        }
        {
            _json["prize"] = new JSONNumber(prize);
        }

        if (diceWindowId != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in diceWindowId) { __cjson0["null"] = new JSONNumber(__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["dice_window_id"] = __cjson0; }
        }

        if (buffWindowId != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in buffWindowId) { __cjson0["null"] = new JSONNumber(__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["buff_window_id"] = __cjson0; }
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderItemConfig(ItemConfig obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
this.id = UnityEditor.EditorGUILayout.IntField(this.id, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("名称", "name"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("name", "名称"), GUILayout.Width(100));
}
this.name = UnityEditor.EditorGUILayout.TextField(this.name, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.name,__x =>this.name = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("技能描述", "content"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("content", "技能描述"), GUILayout.Width(100));
}
this.content = UnityEditor.EditorGUILayout.TextField(this.content, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.content,__x =>this.content = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("图标", "icon"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("icon", "图标"), GUILayout.Width(100));
}
this.icon = UnityEditor.EditorGUILayout.TextField(this.icon, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.icon,__x =>this.icon = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("tag", "item_tag"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("item_tag", "tag"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.itemTag.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.ItemTag>(this.itemTag);
            __list1.RemoveAt(__i1);
            this.itemTag = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        GameEditor.ConfigEditor.Model.ItemTag __e1 = this.itemTag[__i1];
        {
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)__e1;
        var __alias2 = (ItemTag_Alias)__e1;
        __alias2 = (ItemTag_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = ItemTag_Metadata.GetByNameOrAlias(__alias2.ToString());
        __e1 = (GameEditor.ConfigEditor.Model.ItemTag)__item2.Value;
    }
    else
    {
        __e1 = (GameEditor.ConfigEditor.Model.ItemTag)UnityEditor.EditorGUILayout.EnumPopup(__e1, GUILayout.Width(150));
    }
};
        this.itemTag[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.ItemTag>(this.itemTag);
        GameEditor.ConfigEditor.Model.ItemTag __e1;
        __e1 = GameEditor.ConfigEditor.Model.ItemTag.Sword;;
        __list1.Add(__e1);
        this.itemTag = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            GameEditor.ConfigEditor.Model.ItemTag __importElement1;
            if(__importJson1.IsString) { __importElement1 = (GameEditor.ConfigEditor.Model.ItemTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.ItemTag), __importJson1); } else if(__importJson1.IsNumber) { __importElement1 = (GameEditor.ConfigEditor.Model.ItemTag)(int)__importJson1; } else { throw new SerializationException(); }  
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.ItemTag>(this.itemTag);
            __list1.Add(__importElement1);
            this.itemTag = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("显示用tag", "item_show_tag"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("item_show_tag", "显示用tag"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.itemShowTag.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.ItemTag>(this.itemShowTag);
            __list1.RemoveAt(__i1);
            this.itemShowTag = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        GameEditor.ConfigEditor.Model.ItemTag __e1 = this.itemShowTag[__i1];
        {
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)__e1;
        var __alias2 = (ItemTag_Alias)__e1;
        __alias2 = (ItemTag_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = ItemTag_Metadata.GetByNameOrAlias(__alias2.ToString());
        __e1 = (GameEditor.ConfigEditor.Model.ItemTag)__item2.Value;
    }
    else
    {
        __e1 = (GameEditor.ConfigEditor.Model.ItemTag)UnityEditor.EditorGUILayout.EnumPopup(__e1, GUILayout.Width(150));
    }
};
        this.itemShowTag[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.ItemTag>(this.itemShowTag);
        GameEditor.ConfigEditor.Model.ItemTag __e1;
        __e1 = GameEditor.ConfigEditor.Model.ItemTag.Sword;;
        __list1.Add(__e1);
        this.itemShowTag = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            GameEditor.ConfigEditor.Model.ItemTag __importElement1;
            if(__importJson1.IsString) { __importElement1 = (GameEditor.ConfigEditor.Model.ItemTag)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.ItemTag), __importJson1); } else if(__importJson1.IsNumber) { __importElement1 = (GameEditor.ConfigEditor.Model.ItemTag)(int)__importJson1; } else { throw new SerializationException(); }  
            var __list1 = new System.Collections.Generic.List<GameEditor.ConfigEditor.Model.ItemTag>(this.itemShowTag);
            __list1.Add(__importElement1);
            this.itemShowTag = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("自带技能", "skills"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("skills", "自带技能"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.skills.Count;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            this.skills.RemoveAt(__i1);
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        int __e1 = this.skills[__i1];
        __e1 = UnityEditor.EditorGUILayout.IntField(__e1, GUILayout.Width(150));;
        this.skills[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        int __e1;
        __e1 = 0;;
        this.skills.Add(__e1);
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            int __importElement1;
            if(!__importJson1.IsNumber) { throw new SerializationException(); }  __importElement1 = __importJson1;
            this.skills.Add(__importElement1);
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("装配时效果", "install_results"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("install_results", "装配时效果"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.installResults.Count;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            this.installResults.RemoveAt(__i1);
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        GameEditor.ConfigEditor.Model.Result.ResultParam __e1 = this.installResults[__i1];
        {
    if (__e1 == null)
{   
    __e1 = Result.ResultParam.Create("DifferDmg");
}
    Result.ResultParam.RenderResultParam(ref __e1);
};
        this.installResults[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        GameEditor.ConfigEditor.Model.Result.ResultParam __e1;
        __e1 = Result.ResultParam.Create("DifferDmg");;
        this.installResults.Add(__e1);
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            GameEditor.ConfigEditor.Model.Result.ResultParam __importElement1;
            
if (!__importJson1.IsObject)
{
    throw new SerializationException();
}
__importElement1 = GameEditor.ConfigEditor.Model.Result.ResultParam.LoadJsonResultParam(__importJson1);
            this.installResults.Add(__importElement1);
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("卸下时效果", "uninstall_results"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("uninstall_results", "卸下时效果"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.uninstallResults.Count;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            this.uninstallResults.RemoveAt(__i1);
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        GameEditor.ConfigEditor.Model.Result.ResultParam __e1 = this.uninstallResults[__i1];
        {
    if (__e1 == null)
{   
    __e1 = Result.ResultParam.Create("DifferDmg");
}
    Result.ResultParam.RenderResultParam(ref __e1);
};
        this.uninstallResults[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        GameEditor.ConfigEditor.Model.Result.ResultParam __e1;
        __e1 = Result.ResultParam.Create("DifferDmg");;
        this.uninstallResults.Add(__e1);
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            GameEditor.ConfigEditor.Model.Result.ResultParam __importElement1;
            
if (!__importJson1.IsObject)
{
    throw new SerializationException();
}
__importElement1 = GameEditor.ConfigEditor.Model.Result.ResultParam.LoadJsonResultParam(__importJson1);
            this.uninstallResults.Add(__importElement1);
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("是否可以重复掉落", "is_multiple_drop"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("is_multiple_drop", "是否可以重复掉落"), GUILayout.Width(100));
}
this.isMultipleDrop = UnityEditor.EditorGUILayout.Toggle(this.isMultipleDrop, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("是否被锁定", "is_locked"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("is_locked", "是否被锁定"), GUILayout.Width(100));
}
this.isLocked = UnityEditor.EditorGUILayout.Toggle(this.isLocked, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("技能类型", "item_type"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("item_type", "技能类型"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.itemType;
        var __alias1 = (ItemType_Alias)this.itemType;
        __alias1 = (ItemType_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = ItemType_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.itemType = (GameEditor.ConfigEditor.Model.ItemType)__item1.Value;
    }
    else
    {
        this.itemType = (GameEditor.ConfigEditor.Model.ItemType)UnityEditor.EditorGUILayout.EnumPopup(this.itemType, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("稀有度", "rarity"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("rarity", "稀有度"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.rarity;
        var __alias1 = (ItemRarity_Alias)this.rarity;
        __alias1 = (ItemRarity_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = ItemRarity_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.rarity = (GameEditor.ConfigEditor.Model.ItemRarity)__item1.Value;
    }
    else
    {
        this.rarity = (GameEditor.ConfigEditor.Model.ItemRarity)UnityEditor.EditorGUILayout.EnumPopup(this.rarity, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("装配规则", "item_fit_rule"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("item_fit_rule", "装配规则"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("要求位置", "Position"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Position", "要求位置"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)this.itemFitRule.Position;
        var __alias2 = (DicePoolType_Alias)this.itemFitRule.Position;
        __alias2 = (DicePoolType_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = DicePoolType_Metadata.GetByNameOrAlias(__alias2.ToString());
        this.itemFitRule.Position = (GameEditor.ConfigEditor.Model.DicePoolType)__item2.Value;
    }
    else
    {
        this.itemFitRule.Position = (GameEditor.ConfigEditor.Model.DicePoolType)UnityEditor.EditorGUILayout.EnumPopup(this.itemFitRule.Position, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("条件", "Require"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Require", "条件"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)this.itemFitRule.Require;
        var __alias2 = (ItemFitRequire_Alias)this.itemFitRule.Require;
        __alias2 = (ItemFitRequire_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = ItemFitRequire_Metadata.GetByNameOrAlias(__alias2.ToString());
        this.itemFitRule.Require = (GameEditor.ConfigEditor.Model.ItemFitRequire)__item2.Value;
    }
    else
    {
        this.itemFitRule.Require = (GameEditor.ConfigEditor.Model.ItemFitRequire)UnityEditor.EditorGUILayout.EnumPopup(this.itemFitRule.Require, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("值", "Value"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Value", "值"), GUILayout.Width(100));
}
this.itemFitRule.Value = UnityEditor.EditorGUILayout.IntField(this.itemFitRule.Value, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("装备占用", "equip_count"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("equip_count", "装备占用"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("头部", "Head"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Head", "头部"), GUILayout.Width(100));
}
this.equipCount.Head = UnityEditor.EditorGUILayout.IntField(this.equipCount.Head, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("手部", "Hand"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Hand", "手部"), GUILayout.Width(100));
}
this.equipCount.Hand = UnityEditor.EditorGUILayout.IntField(this.equipCount.Hand, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("身体", "Body"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Body", "身体"), GUILayout.Width(100));
}
this.equipCount.Body = UnityEditor.EditorGUILayout.IntField(this.equipCount.Body, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("腿部", "Legs"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Legs", "腿部"), GUILayout.Width(100));
}
this.equipCount.Legs = UnityEditor.EditorGUILayout.IntField(this.equipCount.Legs, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("随从", "Followers"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Followers", "随从"), GUILayout.Width(100));
}
this.equipCount.Followers = UnityEditor.EditorGUILayout.IntField(this.equipCount.Followers, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("基础售价", "prize"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("prize", "基础售价"), GUILayout.Width(100));
}
this.prize = UnityEditor.EditorGUILayout.IntField(this.prize, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰子说明弹窗", "dice_window_id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("dice_window_id", "骰子说明弹窗"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.diceWindowId.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<int>(this.diceWindowId);
            __list1.RemoveAt(__i1);
            this.diceWindowId = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        int __e1 = this.diceWindowId[__i1];
        __e1 = UnityEditor.EditorGUILayout.IntField(__e1, GUILayout.Width(150));;
        this.diceWindowId[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<int>(this.diceWindowId);
        int __e1;
        __e1 = 0;;
        __list1.Add(__e1);
        this.diceWindowId = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            int __importElement1;
            if(!__importJson1.IsNumber) { throw new SerializationException(); }  __importElement1 = __importJson1;
            var __list1 = new System.Collections.Generic.List<int>(this.diceWindowId);
            __list1.Add(__importElement1);
            this.diceWindowId = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("buff说明弹窗", "buff_window_id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("buff_window_id", "buff说明弹窗"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.buffWindowId.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<int>(this.buffWindowId);
            __list1.RemoveAt(__i1);
            this.buffWindowId = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        int __e1 = this.buffWindowId[__i1];
        __e1 = UnityEditor.EditorGUILayout.IntField(__e1, GUILayout.Width(150));;
        this.buffWindowId[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<int>(this.buffWindowId);
        int __e1;
        __e1 = 0;;
        __list1.Add(__e1);
        this.buffWindowId = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            int __importElement1;
            if(!__importJson1.IsNumber) { throw new SerializationException(); }  __importElement1 = __importJson1;
            var __list1 = new System.Collections.Generic.List<int>(this.buffWindowId);
            __list1.Add(__importElement1);
            this.buffWindowId = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static ItemConfig LoadJsonItemConfig(SimpleJSON.JSONNode _json)
    {
        ItemConfig obj = new ItemConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonItemConfig(ItemConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public int id;
    /// <summary>
    /// 名称
    /// </summary>
    public string name;
    /// <summary>
    /// 技能描述
    /// </summary>
    public string content;
    /// <summary>
    /// 图标
    /// </summary>
    public string icon;
    /// <summary>
    /// tag
    /// </summary>
    public GameEditor.ConfigEditor.Model.ItemTag[] itemTag;
    /// <summary>
    /// 显示用tag
    /// </summary>
    public GameEditor.ConfigEditor.Model.ItemTag[] itemShowTag;
    /// <summary>
    /// 自带技能
    /// </summary>
    public System.Collections.Generic.List<int> skills;
    /// <summary>
    /// 装配时效果
    /// </summary>
    public System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Result.ResultParam> installResults;
    /// <summary>
    /// 卸下时效果
    /// </summary>
    public System.Collections.Generic.List<GameEditor.ConfigEditor.Model.Result.ResultParam> uninstallResults;
    /// <summary>
    /// 是否可以重复掉落
    /// </summary>
    public bool isMultipleDrop;
    /// <summary>
    /// 是否被锁定
    /// </summary>
    public bool isLocked;
    /// <summary>
    /// 技能类型
    /// </summary>
    public GameEditor.ConfigEditor.Model.ItemType itemType;
    /// <summary>
    /// 稀有度
    /// </summary>
    public GameEditor.ConfigEditor.Model.ItemRarity rarity;
    /// <summary>
    /// 装配规则
    /// </summary>
    public GameEditor.ConfigEditor.Model.ItemFitRule itemFitRule;
    /// <summary>
    /// 装备占用
    /// </summary>
    public GameEditor.ConfigEditor.Model.ItemEquipCount equipCount;
    /// <summary>
    /// 基础售价
    /// </summary>
    public int prize;
    /// <summary>
    /// 骰子说明弹窗
    /// </summary>
    public int[] diceWindowId;
    /// <summary>
    /// buff说明弹窗
    /// </summary>
    public int[] buffWindowId;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "name:" + name + ","
        + "content:" + content + ","
        + "icon:" + icon + ","
        + "itemTag:" + Luban.StringUtil.CollectionToString(itemTag) + ","
        + "itemShowTag:" + Luban.StringUtil.CollectionToString(itemShowTag) + ","
        + "skills:" + Luban.StringUtil.CollectionToString(skills) + ","
        + "installResults:" + Luban.StringUtil.CollectionToString(installResults) + ","
        + "uninstallResults:" + Luban.StringUtil.CollectionToString(uninstallResults) + ","
        + "isMultipleDrop:" + isMultipleDrop + ","
        + "isLocked:" + isLocked + ","
        + "itemType:" + itemType + ","
        + "rarity:" + rarity + ","
        + "itemFitRule:" + itemFitRule + ","
        + "equipCount:" + equipCount + ","
        + "prize:" + prize + ","
        + "diceWindowId:" + Luban.StringUtil.CollectionToString(diceWindowId) + ","
        + "buffWindowId:" + Luban.StringUtil.CollectionToString(buffWindowId) + ","
        + "}";
    }
}

}

