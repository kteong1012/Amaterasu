
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model
{

public sealed class GlobalConfig :  Luban.EditorBeanBase 
{
    public GlobalConfig()
    {
            dicePoolIconMap = new System.Collections.Generic.List<object[]>();
            dicePoolTextMap = new System.Collections.Generic.List<object[]>();
            dicePoolDefaultIdMap = new System.Collections.Generic.List<object[]>();
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["round_time_limit"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  roundTimeLimit = _fieldJson;
            }
            else
            {
                roundTimeLimit = 0;
            }
        }
        
        { 
            var _fieldJson = _json["dice_pool_icon_map"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } dicePoolIconMap = new System.Collections.Generic.List<object[]>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.DicePoolType __k0;  if(__e0[0].IsString) { __k0 = (GameEditor.ConfigEditor.Model.DicePoolType)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.DicePoolType), __e0[0]); } else if(__e0[0].IsNumber) { __k0 = (GameEditor.ConfigEditor.Model.DicePoolType)(int)__e0[0]; } else { throw new SerializationException(); }   UnityEngine.Object __v0;  if(!__e0[1].IsString) {throw new SerializationException(); } var __v0_Json = __e0[1];
                __v0 = UnityEditor.AssetDatabase.LoadAssetAtPath<UnityEngine.Sprite>(__v0_Json);  dicePoolIconMap.Add(new object[] { __k0, __v0 }); }  
            }
            else
            {
                dicePoolIconMap = new System.Collections.Generic.List<object[]>();
            }
        }
        
        { 
            var _fieldJson = _json["empty_dice_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  emptyDiceId = _fieldJson;
            }
            else
            {
                emptyDiceId = 0;
            }
        }
        
        { 
            var _fieldJson = _json["dice_pool_text_map"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } dicePoolTextMap = new System.Collections.Generic.List<object[]>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.DicePoolType __k0;  if(__e0[0].IsString) { __k0 = (GameEditor.ConfigEditor.Model.DicePoolType)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.DicePoolType), __e0[0]); } else if(__e0[0].IsNumber) { __k0 = (GameEditor.ConfigEditor.Model.DicePoolType)(int)__e0[0]; } else { throw new SerializationException(); }   string __v0;  if(!__e0[1].IsString) { throw new SerializationException(); }  __v0 = __e0[1];  dicePoolTextMap.Add(new object[] { __k0, __v0 }); }  
            }
            else
            {
                dicePoolTextMap = new System.Collections.Generic.List<object[]>();
            }
        }
        
        { 
            var _fieldJson = _json["dice_pool_default_id_map"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } dicePoolDefaultIdMap = new System.Collections.Generic.List<object[]>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { GameEditor.ConfigEditor.Model.DicePoolType __k0;  if(__e0[0].IsString) { __k0 = (GameEditor.ConfigEditor.Model.DicePoolType)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.DicePoolType), __e0[0]); } else if(__e0[0].IsNumber) { __k0 = (GameEditor.ConfigEditor.Model.DicePoolType)(int)__e0[0]; } else { throw new SerializationException(); }   int __v0;  if(!__e0[1].IsNumber) { throw new SerializationException(); }  __v0 = __e0[1];  dicePoolDefaultIdMap.Add(new object[] { __k0, __v0 }); }  
            }
            else
            {
                dicePoolDefaultIdMap = new System.Collections.Generic.List<object[]>();
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["round_time_limit"] = new JSONNumber(roundTimeLimit);
        }

        if (dicePoolIconMap != null)
        {
            {
                var __cjson0 = new JSONArray();
                foreach(var __e0 in dicePoolIconMap)
                {
                    var __entry0 = new JSONArray();
                    __cjson0[null] = __entry0;
                    __entry0["null"] = new JSONNumber((int)(GameEditor.ConfigEditor.Model.DicePoolType)__e0[0]);
                    var null_Path = (UnityEngine.Object)__e0[1] == null ? "" : UnityEditor.AssetDatabase.GetAssetPath((UnityEngine.Object)__e0[1]);
            __entry0["null"] = new JSONString(null_Path);
                }
                __cjson0.Inline = __cjson0.Count == 0;
                _json["dice_pool_icon_map"] = __cjson0;
            }
        }
        {
            _json["empty_dice_id"] = new JSONNumber(emptyDiceId);
        }

        if (dicePoolTextMap != null)
        {
            {
                var __cjson0 = new JSONArray();
                foreach(var __e0 in dicePoolTextMap)
                {
                    var __entry0 = new JSONArray();
                    __cjson0[null] = __entry0;
                    __entry0["null"] = new JSONNumber((int)(GameEditor.ConfigEditor.Model.DicePoolType)__e0[0]);
                    __entry0["null"] = new JSONString((string)__e0[1]);
                }
                __cjson0.Inline = __cjson0.Count == 0;
                _json["dice_pool_text_map"] = __cjson0;
            }
        }

        if (dicePoolDefaultIdMap != null)
        {
            {
                var __cjson0 = new JSONArray();
                foreach(var __e0 in dicePoolDefaultIdMap)
                {
                    var __entry0 = new JSONArray();
                    __cjson0[null] = __entry0;
                    __entry0["null"] = new JSONNumber((int)(GameEditor.ConfigEditor.Model.DicePoolType)__e0[0]);
                    __entry0["null"] = new JSONNumber((int)__e0[1]);
                }
                __cjson0.Inline = __cjson0.Count == 0;
                _json["dice_pool_default_id_map"] = __cjson0;
            }
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderGlobalConfig(GlobalConfig obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("玩家回合时间（ms）", "round_time_limit"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("round_time_limit", "玩家回合时间（ms）"), GUILayout.Width(100));
}
this.roundTimeLimit = UnityEditor.EditorGUILayout.IntField(this.roundTimeLimit, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰子池的图标", "dice_pool_icon_map"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("dice_pool_icon_map", "骰子池的图标"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.dicePoolIconMap.Count;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            this.dicePoolIconMap.RemoveAt(__i1);
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        var __e1 = this.dicePoolIconMap[__i1];
        GameEditor.ConfigEditor.Model.DicePoolType __key1 = GameEditor.ConfigEditor.Model.DicePoolType.Extra;
        UnityEngine.Object __value1 = null;
        if (__e1 == null)
        {
            __e1 = new object[2] { __key1, __value1 };
            this.dicePoolIconMap[__i1] = __e1;
        }
        else
        {
            __key1 = __e1[0] != null ? (GameEditor.ConfigEditor.Model.DicePoolType)__e1[0] : __key1;
            __value1 = __e1[1] != null ? (UnityEngine.Object)__e1[1] : __value1;
        }
        {
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)__key1;
        var __alias2 = (DicePoolType_Alias)__key1;
        __alias2 = (DicePoolType_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = DicePoolType_Metadata.GetByNameOrAlias(__alias2.ToString());
        __key1 = (GameEditor.ConfigEditor.Model.DicePoolType)__item2.Value;
    }
    else
    {
        __key1 = (GameEditor.ConfigEditor.Model.DicePoolType)UnityEditor.EditorGUILayout.EnumPopup(__key1, GUILayout.Width(150));
    }
};
        __value1 = UnityEditor.EditorGUILayout.ObjectField(__value1, typeof(UnityEngine.Sprite), false, GUILayout.Width(150)) as UnityEngine.Sprite;if (__value1 != null)
{
    UnityEngine.GUILayout.Label(((UnityEngine.Sprite)__value1).texture, GUILayout.Height(50));
};
        __e1[0] = __key1;
        __e1[1] = __value1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        this.dicePoolIconMap.Add(new object[2]);
    }
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("空骰子的配置id", "empty_dice_id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("empty_dice_id", "空骰子的配置id"), GUILayout.Width(100));
}
this.emptyDiceId = UnityEditor.EditorGUILayout.IntField(this.emptyDiceId, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰子池的文本", "dice_pool_text_map"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("dice_pool_text_map", "骰子池的文本"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.dicePoolTextMap.Count;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            this.dicePoolTextMap.RemoveAt(__i1);
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        var __e1 = this.dicePoolTextMap[__i1];
        GameEditor.ConfigEditor.Model.DicePoolType __key1 = GameEditor.ConfigEditor.Model.DicePoolType.Extra;
        string __value1 = "";
        if (__e1 == null)
        {
            __e1 = new object[2] { __key1, __value1 };
            this.dicePoolTextMap[__i1] = __e1;
        }
        else
        {
            __key1 = __e1[0] != null ? (GameEditor.ConfigEditor.Model.DicePoolType)__e1[0] : __key1;
            __value1 = __e1[1] != null ? (string)__e1[1] : __value1;
        }
        {
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)__key1;
        var __alias2 = (DicePoolType_Alias)__key1;
        __alias2 = (DicePoolType_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = DicePoolType_Metadata.GetByNameOrAlias(__alias2.ToString());
        __key1 = (GameEditor.ConfigEditor.Model.DicePoolType)__item2.Value;
    }
    else
    {
        __key1 = (GameEditor.ConfigEditor.Model.DicePoolType)UnityEditor.EditorGUILayout.EnumPopup(__key1, GUILayout.Width(150));
    }
};
        __value1 = UnityEditor.EditorGUILayout.TextField(__value1, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(__value1,__x =>__value1 = __x);
};
        __e1[0] = __key1;
        __e1[1] = __value1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        this.dicePoolTextMap.Add(new object[2]);
    }
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("骰子池的文本", "dice_pool_default_id_map"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("dice_pool_default_id_map", "骰子池的文本"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.dicePoolDefaultIdMap.Count;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            this.dicePoolDefaultIdMap.RemoveAt(__i1);
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        var __e1 = this.dicePoolDefaultIdMap[__i1];
        GameEditor.ConfigEditor.Model.DicePoolType __key1 = GameEditor.ConfigEditor.Model.DicePoolType.Extra;
        int __value1 = 0;
        if (__e1 == null)
        {
            __e1 = new object[2] { __key1, __value1 };
            this.dicePoolDefaultIdMap[__i1] = __e1;
        }
        else
        {
            __key1 = __e1[0] != null ? (GameEditor.ConfigEditor.Model.DicePoolType)__e1[0] : __key1;
            __value1 = __e1[1] != null ? (int)__e1[1] : __value1;
        }
        {
    if (ConfigEditorSettings.showComment)
    {
        var __index2 = (int)__key1;
        var __alias2 = (DicePoolType_Alias)__key1;
        __alias2 = (DicePoolType_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias2, GUILayout.Width(150));
        var __item2 = DicePoolType_Metadata.GetByNameOrAlias(__alias2.ToString());
        __key1 = (GameEditor.ConfigEditor.Model.DicePoolType)__item2.Value;
    }
    else
    {
        __key1 = (GameEditor.ConfigEditor.Model.DicePoolType)UnityEditor.EditorGUILayout.EnumPopup(__key1, GUILayout.Width(150));
    }
};
        __value1 = UnityEditor.EditorGUILayout.IntField(__value1, GUILayout.Width(150));;
        __e1[0] = __key1;
        __e1[1] = __value1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        this.dicePoolDefaultIdMap.Add(new object[2]);
    }
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static GlobalConfig LoadJsonGlobalConfig(SimpleJSON.JSONNode _json)
    {
        GlobalConfig obj = new GlobalConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonGlobalConfig(GlobalConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// 玩家回合时间（ms）
    /// </summary>
    public int roundTimeLimit;
    /// <summary>
    /// 骰子池的图标
    /// </summary>
    public System.Collections.Generic.List<object[]> dicePoolIconMap;
    /// <summary>
    /// 空骰子的配置id
    /// </summary>
    public int emptyDiceId;
    /// <summary>
    /// 骰子池的文本
    /// </summary>
    public System.Collections.Generic.List<object[]> dicePoolTextMap;
    /// <summary>
    /// 骰子池的文本
    /// </summary>
    public System.Collections.Generic.List<object[]> dicePoolDefaultIdMap;

    public override string ToString()
    {
        return "{ "
        + "roundTimeLimit:" + roundTimeLimit + ","
        + "dicePoolIconMap:" + Luban.StringUtil.CollectionToString(dicePoolIconMap) + ","
        + "emptyDiceId:" + emptyDiceId + ","
        + "dicePoolTextMap:" + Luban.StringUtil.CollectionToString(dicePoolTextMap) + ","
        + "dicePoolDefaultIdMap:" + Luban.StringUtil.CollectionToString(dicePoolDefaultIdMap) + ","
        + "}";
    }
}

}

