
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Room
{

public sealed class RoomConfig :  Luban.EditorBeanBase 
{
    public RoomConfig()
    {
            name = "";
            type = GameEditor.ConfigEditor.Model.Room.RoomType.StartRoom;
            buff = System.Array.Empty<int>();
            coordinate = new GameEditor.ConfigEditor.Model.RoomCoordinate();
            roomBase = "";
            enemyGroup = new System.Collections.Generic.List<int>();
            surfacePic = "";
            backPic = "";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
            else
            {
                id = 0;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  name = _fieldJson;
            }
            else
            {
                name = "";
            }
        }
        
        { 
            var _fieldJson = _json["type"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { type = (GameEditor.ConfigEditor.Model.Room.RoomType)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.Room.RoomType), _fieldJson); } else if(_fieldJson.IsNumber) { type = (GameEditor.ConfigEditor.Model.Room.RoomType)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                type = GameEditor.ConfigEditor.Model.Room.RoomType.StartRoom;
            }
        }
        
        { 
            var _fieldJson = _json["have_avg"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  haveAvg = _fieldJson;
            }
            else
            {
                haveAvg = false;
            }
        }
        
        { 
            var _fieldJson = _json["avg_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  avgId = _fieldJson;
            }
            else
            {
                avgId = 0;
            }
        }
        
        { 
            var _fieldJson = _json["have_battle"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  haveBattle = _fieldJson;
            }
            else
            {
                haveBattle = false;
            }
        }
        
        { 
            var _fieldJson = _json["buff"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } int __n0 = _fieldJson.Count; buff = new int[__n0]; int __i0=0; foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  buff[__i0++] = __v0; }  
            }
            else
            {
                buff = System.Array.Empty<int>();
            }
        }
        
        { 
            var _fieldJson = _json["coordinate"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsObject) { throw new SerializationException(); }  coordinate = GameEditor.ConfigEditor.Model.RoomCoordinate.LoadJsonRoomCoordinate(_fieldJson);
            }
            else
            {
                coordinate = new RoomCoordinate();
            }
        }
        
        { 
            var _fieldJson = _json["room_base"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  roomBase = _fieldJson;
            }
            else
            {
                roomBase = "";
            }
        }
        
        { 
            var _fieldJson = _json["enemy_group"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsArray) { throw new SerializationException(); } enemyGroup = new System.Collections.Generic.List<int>(); foreach(SimpleJSON.JSONNode __e0 in _fieldJson.Children) { int __v0;  if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0;  enemyGroup.Add(__v0); }  
            }
            else
            {
                enemyGroup = new System.Collections.Generic.List<int>();
            }
        }
        
        { 
            var _fieldJson = _json["surface_pic"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  surfacePic = _fieldJson;
            }
            else
            {
                surfacePic = "";
            }
        }
        
        { 
            var _fieldJson = _json["back_pic"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  backPic = _fieldJson;
            }
            else
            {
                backPic = "";
            }
        }
        
        { 
            var _fieldJson = _json["audio"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  audio = _fieldJson;
            }
            else
            {
                audio = 0;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }

        if (name != null)
        {
            _json["name"] = new JSONString(name);
        }
        {
            _json["type"] = new JSONNumber((int)type);
        }
        {
            _json["have_avg"] = new JSONBool(haveAvg);
        }
        {
            _json["avg_id"] = new JSONNumber(avgId);
        }
        {
            _json["have_battle"] = new JSONBool(haveBattle);
        }

        if (buff != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in buff) { __cjson0["null"] = new JSONNumber(__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["buff"] = __cjson0; }
        }

        if (coordinate != null)
        {
            { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.RoomCoordinate.SaveJsonRoomCoordinate(coordinate, __bjson); _json["coordinate"] = __bjson; }
        }

        if (roomBase != null)
        {
            _json["room_base"] = new JSONString(roomBase);
        }

        if (enemyGroup != null)
        {
            { var __cjson0 = new JSONArray(); foreach(var __e0 in enemyGroup) { __cjson0["null"] = new JSONNumber(__e0); } __cjson0.Inline = __cjson0.Count == 0; _json["enemy_group"] = __cjson0; }
        }

        if (surfacePic != null)
        {
            _json["surface_pic"] = new JSONString(surfacePic);
        }

        if (backPic != null)
        {
            _json["back_pic"] = new JSONString(backPic);
        }
        {
            _json["audio"] = new JSONNumber(audio);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderRoomConfig(RoomConfig obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
this.id = UnityEditor.EditorGUILayout.IntField(this.id, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("房间名称", "name"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("name", "房间名称"), GUILayout.Width(100));
}
this.name = UnityEditor.EditorGUILayout.TextField(this.name, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.name,__x =>this.name = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("type", "type"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("type", ""), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.type;
        var __alias1 = (Room.RoomType_Alias)this.type;
        __alias1 = (Room.RoomType_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = Room.RoomType_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.type = (GameEditor.ConfigEditor.Model.Room.RoomType)__item1.Value;
    }
    else
    {
        this.type = (GameEditor.ConfigEditor.Model.Room.RoomType)UnityEditor.EditorGUILayout.EnumPopup(this.type, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("进入房间是否播放avg", "have_avg"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("have_avg", "进入房间是否播放avg"), GUILayout.Width(100));
}
this.haveAvg = UnityEditor.EditorGUILayout.Toggle(this.haveAvg, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("avg对象", "avg_id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("avg_id", "avg对象"), GUILayout.Width(100));
}
this.avgId = UnityEditor.EditorGUILayout.IntField(this.avgId, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("进入房间是否立即开始战斗", "have_battle"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("have_battle", "进入房间是否立即开始战斗"), GUILayout.Width(100));
}
this.haveBattle = UnityEditor.EditorGUILayout.Toggle(this.haveBattle, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("房间上帝所拥有的buff的id", "buff"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("buff", "房间上帝所拥有的buff的id"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.buff.Length;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            var __list1 = new System.Collections.Generic.List<int>(this.buff);
            __list1.RemoveAt(__i1);
            this.buff = __list1.ToArray();
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        int __e1 = this.buff[__i1];
        __e1 = UnityEditor.EditorGUILayout.IntField(__e1, GUILayout.Width(150));;
        this.buff[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        var __list1 = new System.Collections.Generic.List<int>(this.buff);
        int __e1;
        __e1 = 0;;
        __list1.Add(__e1);
        this.buff = __list1.ToArray();
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            int __importElement1;
            if(!__importJson1.IsNumber) { throw new SerializationException(); }  __importElement1 = __importJson1;
            var __list1 = new System.Collections.Generic.List<int>(this.buff);
            __list1.Add(__importElement1);
            this.buff = __list1.ToArray();
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("房间预设坐标", "coordinate"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("coordinate", "房间预设坐标"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("横坐标", "X"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("X", "横坐标"), GUILayout.Width(100));
}
this.coordinate.X = UnityEditor.EditorGUILayout.IntField(this.coordinate.X, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("纵坐标", "Y"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("Y", "纵坐标"), GUILayout.Width(100));
}
this.coordinate.Y = UnityEditor.EditorGUILayout.IntField(this.coordinate.Y, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("房间的地面预制件地址", "room_base"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("room_base", "房间的地面预制件地址"), GUILayout.Width(100));
}
this.roomBase = UnityEditor.EditorGUILayout.TextField(this.roomBase, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.roomBase,__x =>this.roomBase = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("房间内的怪物组", "enemy_group"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("enemy_group", "房间内的怪物组"), GUILayout.Width(100));
}
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);
    int __n1 = this.enemyGroup.Count;
    UnityEditor.EditorGUILayout.LabelField("长度: " + __n1.ToString());
    for (int __i1 = 0; __i1 < __n1; __i1++)
    {
        UnityEditor.EditorGUILayout.BeginHorizontal();
        if (GUILayout.Button("-", GUILayout.Width(20)))
        {
            this.enemyGroup.RemoveAt(__i1);
            UnityEditor.EditorGUILayout.EndHorizontal();
            break;
        }
        UnityEditor.EditorGUILayout.LabelField(__i1.ToString(), GUILayout.Width(20));
        int __e1 = this.enemyGroup[__i1];
        __e1 = UnityEditor.EditorGUILayout.IntField(__e1, GUILayout.Width(150));;
        this.enemyGroup[__i1] = __e1;
        UnityEditor.EditorGUILayout.EndHorizontal();
    }
    UnityEditor.EditorGUILayout.BeginHorizontal();
    if (GUILayout.Button("+", GUILayout.Width(20)))
    {
        int __e1;
        __e1 = 0;;
        this.enemyGroup.Add(__e1);
    }
    if (ConfigEditorSettings.showImportButton && GUILayout.Button("import", GUILayout.Width(100)))
    {
        ConfigEditorImportWindow.Open((__importJsonText1) => 
        {
            var __importJson1 = SimpleJSON.JSON.Parse(__importJsonText1);
            int __importElement1;
            if(!__importJson1.IsNumber) { throw new SerializationException(); }  __importElement1 = __importJson1;
            this.enemyGroup.Add(__importElement1);
        });
    }
    UnityEditor.EditorGUILayout.EndHorizontal();
    UnityEditor.EditorGUILayout.EndVertical();
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("卡面正面图的地址", "surface_pic"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("surface_pic", "卡面正面图的地址"), GUILayout.Width(100));
}
this.surfacePic = UnityEditor.EditorGUILayout.TextField(this.surfacePic, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.surfacePic,__x =>this.surfacePic = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("卡面背面图的地址", "back_pic"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("back_pic", "卡面背面图的地址"), GUILayout.Width(100));
}
this.backPic = UnityEditor.EditorGUILayout.TextField(this.backPic, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.backPic,__x =>this.backPic = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("进房间切换bgm的id", "audio"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("audio", "进房间切换bgm的id"), GUILayout.Width(100));
}
this.audio = UnityEditor.EditorGUILayout.IntField(this.audio, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static RoomConfig LoadJsonRoomConfig(SimpleJSON.JSONNode _json)
    {
        RoomConfig obj = new Room.RoomConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonRoomConfig(RoomConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public int id;
    /// <summary>
    /// 房间名称
    /// </summary>
    public string name;
    public GameEditor.ConfigEditor.Model.Room.RoomType type;
    /// <summary>
    /// 进入房间是否播放avg
    /// </summary>
    public bool haveAvg;
    /// <summary>
    /// avg对象
    /// </summary>
    public int avgId;
    /// <summary>
    /// 进入房间是否立即开始战斗
    /// </summary>
    public bool haveBattle;
    /// <summary>
    /// 房间上帝所拥有的buff的id
    /// </summary>
    public int[] buff;
    /// <summary>
    /// 房间预设坐标
    /// </summary>
    public GameEditor.ConfigEditor.Model.RoomCoordinate coordinate;
    /// <summary>
    /// 房间的地面预制件地址
    /// </summary>
    public string roomBase;
    /// <summary>
    /// 房间内的怪物组
    /// </summary>
    public System.Collections.Generic.List<int> enemyGroup;
    /// <summary>
    /// 卡面正面图的地址
    /// </summary>
    public string surfacePic;
    /// <summary>
    /// 卡面背面图的地址
    /// </summary>
    public string backPic;
    /// <summary>
    /// 进房间切换bgm的id
    /// </summary>
    public int audio;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "name:" + name + ","
        + "type:" + type + ","
        + "haveAvg:" + haveAvg + ","
        + "avgId:" + avgId + ","
        + "haveBattle:" + haveBattle + ","
        + "buff:" + Luban.StringUtil.CollectionToString(buff) + ","
        + "coordinate:" + coordinate + ","
        + "roomBase:" + roomBase + ","
        + "enemyGroup:" + Luban.StringUtil.CollectionToString(enemyGroup) + ","
        + "surfacePic:" + surfacePic + ","
        + "backPic:" + backPic + ","
        + "audio:" + audio + ","
        + "}";
    }
}

}

