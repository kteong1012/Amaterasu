
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Avg
{

public sealed class DetermineBehaviour :  Avg.DialogueBehaviour 
{
    public DetermineBehaviour()
    {
            target = GameEditor.ConfigEditor.Model.Avg.AvgDetermineTarget.Opener2Owner;
    }
    public override string GetTypeStr() => TYPE_STR;
    private const string TYPE_STR = "DetermineBehaviour";

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["skill_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  skillId = _fieldJson;
            }
            else
            {
                skillId = 0;
            }
        }
        
        { 
            var _fieldJson = _json["target"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { target = (GameEditor.ConfigEditor.Model.Avg.AvgDetermineTarget)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.Avg.AvgDetermineTarget), _fieldJson); } else if(_fieldJson.IsNumber) { target = (GameEditor.ConfigEditor.Model.Avg.AvgDetermineTarget)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                target = GameEditor.ConfigEditor.Model.Avg.AvgDetermineTarget.Opener2Owner;
            }
        }
        
        { 
            var _fieldJson = _json["win_next_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  winNextId = _fieldJson;
            }
            else
            {
                winNextId = 0;
            }
        }
        
        { 
            var _fieldJson = _json["lose_next_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  loseNextId = _fieldJson;
            }
            else
            {
                loseNextId = 0;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["skill_id"] = new JSONNumber(skillId);
        }
        {
            _json["target"] = new JSONNumber((int)target);
        }
        {
            _json["win_next_id"] = new JSONNumber(winNextId);
        }
        {
            _json["lose_next_id"] = new JSONNumber(loseNextId);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderDetermineBehaviour(DetermineBehaviour obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("技能id", "skill_id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("skill_id", "技能id"), GUILayout.Width(100));
}
this.skillId = UnityEditor.EditorGUILayout.IntField(this.skillId, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("目标类型", "target"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("target", "目标类型"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.target;
        var __alias1 = (Avg.AvgDetermineTarget_Alias)this.target;
        __alias1 = (Avg.AvgDetermineTarget_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = Avg.AvgDetermineTarget_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.target = (GameEditor.ConfigEditor.Model.Avg.AvgDetermineTarget)__item1.Value;
    }
    else
    {
        this.target = (GameEditor.ConfigEditor.Model.Avg.AvgDetermineTarget)UnityEditor.EditorGUILayout.EnumPopup(this.target, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("拼点胜利下句id", "win_next_id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("win_next_id", "拼点胜利下句id"), GUILayout.Width(100));
}
this.winNextId = UnityEditor.EditorGUILayout.IntField(this.winNextId, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("拼点失败下句id", "lose_next_id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("lose_next_id", "拼点失败下句id"), GUILayout.Width(100));
}
this.loseNextId = UnityEditor.EditorGUILayout.IntField(this.loseNextId, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static DetermineBehaviour LoadJsonDetermineBehaviour(SimpleJSON.JSONNode _json)
    {
        DetermineBehaviour obj = new Avg.DetermineBehaviour();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonDetermineBehaviour(DetermineBehaviour _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// 技能id
    /// </summary>
    public int skillId;
    /// <summary>
    /// 目标类型
    /// </summary>
    public GameEditor.ConfigEditor.Model.Avg.AvgDetermineTarget target;
    /// <summary>
    /// 拼点胜利下句id
    /// </summary>
    public int winNextId;
    /// <summary>
    /// 拼点失败下句id
    /// </summary>
    public int loseNextId;

    public override string ToString()
    {
        return "{ "
        + "skillId:" + skillId + ","
        + "target:" + target + ","
        + "winNextId:" + winNextId + ","
        + "loseNextId:" + loseNextId + ","
        + "}";
    }
}

}

