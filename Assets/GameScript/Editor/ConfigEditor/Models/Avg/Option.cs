
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Avg
{

public sealed class Option :  Luban.EditorBeanBase 
{
    public Option()
    {
            additionalContent = "";
            text = "";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["next_id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  nextId = _fieldJson;
            }
            else
            {
                nextId = 0;
            }
        }
        
        { 
            var _fieldJson = _json["inner_condition"];
            if (_fieldJson != null)
            {
                
                if (!_fieldJson.IsObject)
                {
                    throw new SerializationException();
                }
                innerCondition = GameEditor.ConfigEditor.Model.ConditionParam.LoadJsonConditionParam(_fieldJson);
            }
            else
            {
                innerCondition = ConditionParam.Create("Always");
            }
        }
        
        { 
            var _fieldJson = _json["outer_condition"];
            if (_fieldJson != null)
            {
                
                if (!_fieldJson.IsObject)
                {
                    throw new SerializationException();
                }
                outerCondition = GameEditor.ConfigEditor.Model.ConditionParam.LoadJsonConditionParam(_fieldJson);
            }
            else
            {
                outerCondition = ConditionParam.Create("Always");
            }
        }
        
        { 
            var _fieldJson = _json["additional_content"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  additionalContent = _fieldJson;
            }
            else
            {
                additionalContent = "";
            }
        }
        
        { 
            var _fieldJson = _json["text"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  text = _fieldJson;
            }
            else
            {
                text = "";
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["next_id"] = new JSONNumber(nextId);
        }

        if (innerCondition != null)
        {
            { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.ConditionParam.SaveJsonConditionParam(innerCondition, __bjson); _json["inner_condition"] = __bjson; }
        }

        if (outerCondition != null)
        {
            { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.ConditionParam.SaveJsonConditionParam(outerCondition, __bjson); _json["outer_condition"] = __bjson; }
        }

        if (additionalContent != null)
        {
            _json["additional_content"] = new JSONString(additionalContent);
        }

        if (text != null)
        {
            _json["text"] = new JSONString(text);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderOption(Option obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("下句id", "next_id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("next_id", "下句id"), GUILayout.Width(100));
}
this.nextId = UnityEditor.EditorGUILayout.IntField(this.nextId, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("可点击条件", "inner_condition"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("inner_condition", "可点击条件"), GUILayout.Width(100));
}
{
    if (this.innerCondition == null)
{   
    this.innerCondition = ConditionParam.Create("Always");
}
    ConditionParam.RenderConditionParam(ref this.innerCondition);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("可显示条件", "outer_condition"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("outer_condition", "可显示条件"), GUILayout.Width(100));
}
{
    if (this.outerCondition == null)
{   
    this.outerCondition = ConditionParam.Create("Always");
}
    ConditionParam.RenderConditionParam(ref this.outerCondition);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("不可点击文本", "additional_content"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("additional_content", "不可点击文本"), GUILayout.Width(100));
}
this.additionalContent = UnityEditor.EditorGUILayout.TextField(this.additionalContent, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.additionalContent,__x =>this.additionalContent = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("选项文本", "text"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("text", "选项文本"), GUILayout.Width(100));
}
this.text = UnityEditor.EditorGUILayout.TextField(this.text, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.text,__x =>this.text = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static Option LoadJsonOption(SimpleJSON.JSONNode _json)
    {
        Option obj = new Avg.Option();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonOption(Option _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// 下句id
    /// </summary>
    public int nextId;
    /// <summary>
    /// 可点击条件
    /// </summary>
    public GameEditor.ConfigEditor.Model.ConditionParam innerCondition;
    /// <summary>
    /// 可显示条件
    /// </summary>
    public GameEditor.ConfigEditor.Model.ConditionParam outerCondition;
    /// <summary>
    /// 不可点击文本
    /// </summary>
    public string additionalContent;
    /// <summary>
    /// 选项文本
    /// </summary>
    public string text;

    public override string ToString()
    {
        return "{ "
        + "nextId:" + nextId + ","
        + "innerCondition:" + innerCondition + ","
        + "outerCondition:" + outerCondition + ","
        + "additionalContent:" + additionalContent + ","
        + "text:" + text + ","
        + "}";
    }
}

}

