
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model
{

public sealed class BuffDiceConfig :  Luban.EditorBeanBase 
{
    public BuffDiceConfig()
    {
            name = "";
            content = "";
            target = GameEditor.ConfigEditor.Model.SkillAoe.Single;
            icon = null;
            projectilePath = "";
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  id = _fieldJson;
            }
            else
            {
                id = 0;
            }
        }
        
        { 
            var _fieldJson = _json["name"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  name = _fieldJson;
            }
            else
            {
                name = "";
            }
        }
        
        { 
            var _fieldJson = _json["content"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  content = _fieldJson;
            }
            else
            {
                content = "";
            }
        }
        
        { 
            var _fieldJson = _json["show"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  show = _fieldJson;
            }
            else
            {
                show = false;
            }
        }
        
        { 
            var _fieldJson = _json["target"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { target = (GameEditor.ConfigEditor.Model.SkillAoe)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.SkillAoe), _fieldJson); } else if(_fieldJson.IsNumber) { target = (GameEditor.ConfigEditor.Model.SkillAoe)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                target = GameEditor.ConfigEditor.Model.SkillAoe.Single;
            }
        }
        
        { 
            var _fieldJson = _json["handler"];
            if (_fieldJson != null)
            {
                
                if (!_fieldJson.IsObject)
                {
                    throw new SerializationException();
                }
                handler = GameEditor.ConfigEditor.Model.BuffDiceHandler.LoadJsonBuffDiceHandler(_fieldJson);
            }
            else
            {
                handler = BuffDiceHandler.Create("BuffDiceResult");
            }
        }
        
        { 
            var _fieldJson = _json["cause_battle"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  causeBattle = _fieldJson;
            }
            else
            {
                causeBattle = false;
            }
        }
        
        { 
            var _fieldJson = _json["trigged"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsBoolean) { throw new SerializationException(); }  trigged = _fieldJson;
            }
            else
            {
                trigged = false;
            }
        }
        
        { 
            var _fieldJson = _json["icon"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) {throw new SerializationException(); } var icon_Json = _fieldJson;
                icon = UnityEditor.AssetDatabase.LoadAssetAtPath<UnityEngine.Sprite>(icon_Json);
            }
            else
            {
                icon = null;
            }
        }
        
        { 
            var _fieldJson = _json["projectile_path"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsString) { throw new SerializationException(); }  projectilePath = _fieldJson;
            }
            else
            {
                projectilePath = "";
            }
        }
        
        { 
            var _fieldJson = _json["projectile_duration"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  projectileDuration = _fieldJson;
            }
            else
            {
                projectileDuration = 0;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber(id);
        }

        if (name != null)
        {
            _json["name"] = new JSONString(name);
        }

        if (content != null)
        {
            _json["content"] = new JSONString(content);
        }
        {
            _json["show"] = new JSONBool(show);
        }
        {
            _json["target"] = new JSONNumber((int)target);
        }

        if (handler != null)
        {
            { var __bjson = new JSONObject();  GameEditor.ConfigEditor.Model.BuffDiceHandler.SaveJsonBuffDiceHandler(handler, __bjson); _json["handler"] = __bjson; }
        }
        {
            _json["cause_battle"] = new JSONBool(causeBattle);
        }
        {
            _json["trigged"] = new JSONBool(trigged);
        }

        if (icon != null)
        {
            var icon_Path = icon == null ? "" : UnityEditor.AssetDatabase.GetAssetPath(icon);
            _json["icon"] = new JSONString(icon_Path);
        }

        if (projectilePath != null)
        {
            _json["projectile_path"] = new JSONString(projectilePath);
        }
        {
            _json["projectile_duration"] = new JSONNumber(projectileDuration);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderBuffDiceConfig(BuffDiceConfig obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
this.id = UnityEditor.EditorGUILayout.IntField(this.id, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("名称", "name"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("name", "名称"), GUILayout.Width(100));
}
this.name = UnityEditor.EditorGUILayout.TextField(this.name, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.name,__x =>this.name = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("描述", "content"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("content", "描述"), GUILayout.Width(100));
}
this.content = UnityEditor.EditorGUILayout.TextField(this.content, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.content,__x =>this.content = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("是否显示", "show"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("show", "是否显示"), GUILayout.Width(100));
}
this.show = UnityEditor.EditorGUILayout.Toggle(this.show, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("索敌类型", "target"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("target", "索敌类型"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.target;
        var __alias1 = (SkillAoe_Alias)this.target;
        __alias1 = (SkillAoe_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = SkillAoe_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.target = (GameEditor.ConfigEditor.Model.SkillAoe)__item1.Value;
    }
    else
    {
        this.target = (GameEditor.ConfigEditor.Model.SkillAoe)UnityEditor.EditorGUILayout.EnumPopup(this.target, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("执行器", "handler"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("handler", "执行器"), GUILayout.Width(100));
}
{
    if (this.handler == null)
{   
    this.handler = BuffDiceHandler.Create("BuffDiceResult");
}
    BuffDiceHandler.RenderBuffDiceHandler(ref this.handler);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("是否会引起战斗", "cause_battle"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("cause_battle", "是否会引起战斗"), GUILayout.Width(100));
}
this.causeBattle = UnityEditor.EditorGUILayout.Toggle(this.causeBattle, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("是否能被监听", "trigged"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("trigged", "是否能被监听"), GUILayout.Width(100));
}
this.trigged = UnityEditor.EditorGUILayout.Toggle(this.trigged, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("图像", "icon"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("icon", "图像"), GUILayout.Width(100));
}
this.icon = UnityEditor.EditorGUILayout.ObjectField(this.icon, typeof(UnityEngine.Sprite), false, GUILayout.Width(150)) as UnityEngine.Sprite;if (this.icon != null)
{
    UnityEngine.GUILayout.Label(((UnityEngine.Sprite)this.icon).texture, GUILayout.Height(50));
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("投射物特效", "projectile_path"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("projectile_path", "投射物特效"), GUILayout.Width(100));
}
this.projectilePath = UnityEditor.EditorGUILayout.TextField(this.projectilePath, GUILayout.Width(150));
if (GUILayout.Button("…", GUILayout.Width(20)))
{
    TextInputWindow.GetTextAsync(this.projectilePath,__x =>this.projectilePath = __x);
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("投射物飞行时间", "projectile_duration"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("projectile_duration", "投射物飞行时间"), GUILayout.Width(100));
}
this.projectileDuration = UnityEditor.EditorGUILayout.DoubleField(this.projectileDuration, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static BuffDiceConfig LoadJsonBuffDiceConfig(SimpleJSON.JSONNode _json)
    {
        BuffDiceConfig obj = new BuffDiceConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonBuffDiceConfig(BuffDiceConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public int id;
    /// <summary>
    /// 名称
    /// </summary>
    public string name;
    /// <summary>
    /// 描述
    /// </summary>
    public string content;
    /// <summary>
    /// 是否显示
    /// </summary>
    public bool show;
    /// <summary>
    /// 索敌类型
    /// </summary>
    public GameEditor.ConfigEditor.Model.SkillAoe target;
    /// <summary>
    /// 执行器
    /// </summary>
    public GameEditor.ConfigEditor.Model.BuffDiceHandler handler;
    /// <summary>
    /// 是否会引起战斗
    /// </summary>
    public bool causeBattle;
    /// <summary>
    /// 是否能被监听
    /// </summary>
    public bool trigged;
    /// <summary>
    /// 图像
    /// </summary>
    public UnityEngine.Object icon;
    /// <summary>
    /// 投射物特效
    /// </summary>
    public string projectilePath;
    /// <summary>
    /// 投射物飞行时间
    /// </summary>
    public double projectileDuration;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "name:" + name + ","
        + "content:" + content + ","
        + "show:" + show + ","
        + "target:" + target + ","
        + "handler:" + handler + ","
        + "causeBattle:" + causeBattle + ","
        + "trigged:" + trigged + ","
        + "icon:" + icon + ","
        + "projectilePath:" + projectilePath + ","
        + "projectileDuration:" + projectileDuration + ","
        + "}";
    }
}

}

