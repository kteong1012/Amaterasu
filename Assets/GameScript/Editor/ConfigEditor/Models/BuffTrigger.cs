
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace GameEditor.ConfigEditor.Model
{
    /// <summary>
    /// Buff触发时机
    /// </summary>
    public enum BuffTrigger
    {
        /// <summary>
        /// 持续时机
        /// </summary>
        Continuous = 0,
        /// <summary>
        /// 产生伤害
        /// </summary>
        Damage = 1,
        /// <summary>
        /// 产生治疗
        /// </summary>
        Heal = 2,
        /// <summary>
        /// 获得骰子
        /// </summary>
        DiceGet = 3,
        /// <summary>
        /// 失去骰子
        /// </summary>
        DiceLose = 4,
        /// <summary>
        /// 战斗开始
        /// </summary>
        BattleStart = 5,
        /// <summary>
        /// 战斗结束
        /// </summary>
        BattleFinish = 6,
        /// <summary>
        /// 回合开始
        /// </summary>
        RoundStart = 7,
        /// <summary>
        /// 回合结束
        /// </summary>
        RoundFinish = 8,
        /// <summary>
        /// 获得金钱
        /// </summary>
        GoldGet = 9,
        /// <summary>
        /// 获得经验值
        /// </summary>
        ExpGet = 10,
    }

    public enum BuffTrigger_Alias
    {
        持续时机 = 0,
        产生伤害 = 1,
        产生治疗 = 2,
        获得骰子 = 3,
        失去骰子 = 4,
        战斗开始 = 5,
        战斗结束 = 6,
        回合开始 = 7,
        回合结束 = 8,
        获得金钱 = 9,
        获得经验值 = 10,
    }

    public static class BuffTrigger_Metadata
    {
        public static readonly Luban.EditorEnumItemInfo Continuous = new Luban.EditorEnumItemInfo("Continuous", "持续时机", 0, "持续时机");
        public static readonly Luban.EditorEnumItemInfo Damage = new Luban.EditorEnumItemInfo("Damage", "产生伤害", 1, "产生伤害");
        public static readonly Luban.EditorEnumItemInfo Heal = new Luban.EditorEnumItemInfo("Heal", "产生治疗", 2, "产生治疗");
        public static readonly Luban.EditorEnumItemInfo DiceGet = new Luban.EditorEnumItemInfo("DiceGet", "获得骰子", 3, "获得骰子");
        public static readonly Luban.EditorEnumItemInfo DiceLose = new Luban.EditorEnumItemInfo("DiceLose", "失去骰子", 4, "失去骰子");
        public static readonly Luban.EditorEnumItemInfo BattleStart = new Luban.EditorEnumItemInfo("BattleStart", "战斗开始", 5, "战斗开始");
        public static readonly Luban.EditorEnumItemInfo BattleFinish = new Luban.EditorEnumItemInfo("BattleFinish", "战斗结束", 6, "战斗结束");
        public static readonly Luban.EditorEnumItemInfo RoundStart = new Luban.EditorEnumItemInfo("RoundStart", "回合开始", 7, "回合开始");
        public static readonly Luban.EditorEnumItemInfo RoundFinish = new Luban.EditorEnumItemInfo("RoundFinish", "回合结束", 8, "回合结束");
        public static readonly Luban.EditorEnumItemInfo GoldGet = new Luban.EditorEnumItemInfo("GoldGet", "获得金钱", 9, "获得金钱");
        public static readonly Luban.EditorEnumItemInfo ExpGet = new Luban.EditorEnumItemInfo("ExpGet", "获得经验值", 10, "获得经验值");

        private static readonly System.Collections.Generic.List<Luban.EditorEnumItemInfo> __items = new System.Collections.Generic.List<Luban.EditorEnumItemInfo>
        {
            Continuous,
            Damage,
            Heal,
            DiceGet,
            DiceLose,
            BattleStart,
            BattleFinish,
            RoundStart,
            RoundFinish,
            GoldGet,
            ExpGet,
        };

        public static System.Collections.Generic.List<Luban.EditorEnumItemInfo> GetItems() => __items;

        public static Luban.EditorEnumItemInfo GetByName(string name)
        {
            return __items.Find(c => c.Name == name);
        }

        public static Luban.EditorEnumItemInfo GetByNameOrAlias(string name)
        {
            return __items.Find(c => c.Name == name || c.Alias == name);
        }

        public static Luban.EditorEnumItemInfo GetByValue(int value)
        {
            return __items.Find(c => c.Value == value);
        }
    }

} 

