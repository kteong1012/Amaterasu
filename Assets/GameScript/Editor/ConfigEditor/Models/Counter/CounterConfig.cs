
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;
using SimpleJSON;
using Luban;
using UnityEngine;
using System.Linq;
using System;

namespace GameEditor.ConfigEditor.Model.Counter
{

public sealed class CounterConfig :  Luban.EditorBeanBase 
{
    public CounterConfig()
    {
            id = GameEditor.ConfigEditor.Model.Counter.CounterName.Counter1;
            refreshRule = GameEditor.ConfigEditor.Model.Counter.RefreshRule.NoRefreshTime;
    }

    public override void LoadJson(SimpleJSON.JSONObject _json)
    {
        { 
            var _fieldJson = _json["id"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { id = (GameEditor.ConfigEditor.Model.Counter.CounterName)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.Counter.CounterName), _fieldJson); } else if(_fieldJson.IsNumber) { id = (GameEditor.ConfigEditor.Model.Counter.CounterName)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                id = GameEditor.ConfigEditor.Model.Counter.CounterName.Counter1;
            }
        }
        
        { 
            var _fieldJson = _json["refresh_rule"];
            if (_fieldJson != null)
            {
                if(_fieldJson.IsString) { refreshRule = (GameEditor.ConfigEditor.Model.Counter.RefreshRule)System.Enum.Parse(typeof(GameEditor.ConfigEditor.Model.Counter.RefreshRule), _fieldJson); } else if(_fieldJson.IsNumber) { refreshRule = (GameEditor.ConfigEditor.Model.Counter.RefreshRule)(int)_fieldJson; } else { throw new SerializationException(); }  
            }
            else
            {
                refreshRule = GameEditor.ConfigEditor.Model.Counter.RefreshRule.NoRefreshTime;
            }
        }
        
        { 
            var _fieldJson = _json["original_value"];
            if (_fieldJson != null)
            {
                if(!_fieldJson.IsNumber) { throw new SerializationException(); }  originalValue = _fieldJson;
            }
            else
            {
                originalValue = 0;
            }
        }
        
    }

    public override void SaveJson(SimpleJSON.JSONObject _json)
    {
        {
            _json["id"] = new JSONNumber((int)id);
        }
        {
            _json["refresh_rule"] = new JSONNumber((int)refreshRule);
        }
        {
            _json["original_value"] = new JSONNumber(originalValue);
        }
    }

    private static GUIStyle _areaStyle = new GUIStyle(GUI.skin.button);

    public static void RenderCounterConfig(CounterConfig obj)
    {
        obj.Render();
    }

    public override void Render()
    {
{
    UnityEditor.EditorGUILayout.BeginVertical(_areaStyle);UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("id", "id"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.id;
        var __alias1 = (Counter.CounterName_Alias)this.id;
        __alias1 = (Counter.CounterName_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = Counter.CounterName_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.id = (GameEditor.ConfigEditor.Model.Counter.CounterName)__item1.Value;
    }
    else
    {
        this.id = (GameEditor.ConfigEditor.Model.Counter.CounterName)UnityEditor.EditorGUILayout.EnumPopup(this.id, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("刷新规则", "refresh_rule"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("refresh_rule", "刷新规则"), GUILayout.Width(100));
}
{
    if (ConfigEditorSettings.showComment)
    {
        var __index1 = (int)this.refreshRule;
        var __alias1 = (Counter.RefreshRule_Alias)this.refreshRule;
        __alias1 = (Counter.RefreshRule_Alias)UnityEditor.EditorGUILayout.EnumPopup(__alias1, GUILayout.Width(150));
        var __item1 = Counter.RefreshRule_Metadata.GetByNameOrAlias(__alias1.ToString());
        this.refreshRule = (GameEditor.ConfigEditor.Model.Counter.RefreshRule)__item1.Value;
    }
    else
    {
        this.refreshRule = (GameEditor.ConfigEditor.Model.Counter.RefreshRule)UnityEditor.EditorGUILayout.EnumPopup(this.refreshRule, GUILayout.Width(150));
    }
}
UnityEditor.EditorGUILayout.EndHorizontal();UnityEditor.EditorGUILayout.BeginHorizontal();
if (ConfigEditorSettings.showComment)
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("初始值", "original_value"), GUILayout.Width(100));
}
else
{
    UnityEditor.EditorGUILayout.LabelField(new UnityEngine.GUIContent("original_value", "初始值"), GUILayout.Width(100));
}
this.originalValue = UnityEditor.EditorGUILayout.IntField(this.originalValue, GUILayout.Width(150));
UnityEditor.EditorGUILayout.EndHorizontal();    UnityEditor.EditorGUILayout.EndVertical();
}    }
    public static CounterConfig LoadJsonCounterConfig(SimpleJSON.JSONNode _json)
    {
        CounterConfig obj = new Counter.CounterConfig();
        obj.LoadJson((SimpleJSON.JSONObject)_json);
        return obj;
    }
        
    public static void SaveJsonCounterConfig(CounterConfig _obj, SimpleJSON.JSONNode _json)
    {
        _obj.SaveJson((SimpleJSON.JSONObject)_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public GameEditor.ConfigEditor.Model.Counter.CounterName id;
    /// <summary>
    /// 刷新规则
    /// </summary>
    public GameEditor.ConfigEditor.Model.Counter.RefreshRule refreshRule;
    /// <summary>
    /// 初始值
    /// </summary>
    public int originalValue;

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "refreshRule:" + refreshRule + ","
        + "originalValue:" + originalValue + ","
        + "}";
    }
}

}

